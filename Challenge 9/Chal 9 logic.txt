->Logica: https://dev.to/dandyvica/understanding-public-private-rsa-keys-3j81
---------------------------------------------------------------------------------------------------
->Recuerda 1: Una private/public key son tan solo estructuras de datos que contienen los coeficientes a manipular.
->Recuerda 2: ciphertext = pow(inputKey, d, n) and plaintext = pow(inputKey, e, n)

What do I need to know to finish this chal?

1.-Decrypt the salsa20 key:
	->What do you know?: n, ciphertext, public exponent.
	->It is using the public exponent, and inside the same function, deriving and replacing it for a private exponent at runtime. 
		->But you already know the public exponent, so what is happening?: RSA Signing
		->(Special thanks to Jiri for letting me know about RSA signing and some tricks about the crypto algos, which I had no clue about.)
	->Therefore you can decrypt it using: plaintext = pow(ciphertext, e, n)

2.-Decrypt the core payload:
	->You can code a deobfuscator on your own... or you can make the binary decrypt it for you at runtime, replacing the decrypted salsa20 key in-memory (key symmetric property).
	->You just need to convert the key to little endian, and you have the "encrypted file" with the decrypted flag.

