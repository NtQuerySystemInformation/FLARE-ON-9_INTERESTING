->Logica: https://dev.to/dandyvica/understanding-public-private-rsa-keys-3j81
---------------------------------------------------------------------------------------------------
->Recuerda 1: Una private/public key son tan solo estructuras de datos que contienen los coeficientes a manipular.
->Recuerda 2: ciphertext = pow(inputKey, d, n) and plaintext = pow(inputKey, e, n)

Que cosas faltan para acabar este chal?:

1.-Desencriptar la llave:
	->Elementos a tener en cuenta: Tienes n, encrypted key, y el exponente publico.
	->Plot twist: Genera un key pair:
		-RSA signing es la vulnerabilidad en la implementacion.
	
	->Identify the e/d buffer:
		-Hypothesis: Seems to be replacing the entire e exponent with a new buffer, what is this new buffer?
			->Multiplicative inverse.
		-https://medium.com/@bn121rajesh/rsa-sign-and-verify-using-openssl-behind-the-scene-bf3cac0aade2

2.-Desencriptar Salsa a traves del binario:
	->RECUERDA: Como es simetrico, no es necesario rayarte con eso, solo consigue la llave, y reeplazas.
	->Convierte la llave en little endian, reemplaza el key en tiempo de ejecucion.
	->Luego aplica el archivo con los contenidos a desencriptar, y tienes tu flag.