import rsa


def decrypt_rsa():  
    



#first 30 bytes are related to keys.
#Your objective now is deducing what corresponds to what, and take in mind ALSO salsa 20.
#Take in mind that: Keys are 512 bits
def main():
    data1 = bytes(b
    data2 = bytes(b'646334323563373230343030653035613932656562363864303331336338346139373863626366343734373463626439363335656233353361663836346561343632323135343661306634643039616161303838353131336533316462353362353635633136396333363036613234316235363939313261396266393563393161666263303435323834333166646365653630343437383166626338363239623036663939613131623939633035383336653437363338626264303761323332633635383132396165623039346464616634633361643334353633656539323661383731323362633636396637316562363039376537376331383862396263390D')
    data3 = bytes(b'386536373866303433633064386238643364666633396232386365393937346666376434313632343733303830623534656566616136646563623838323737313763366232346564666666373036333337356236353838616366386563613335633230333365663865626537323134333664653666326636363536396230336466386335383631613638653537313138633966383534623265363263613938373166373230376661666139366163656261313166666433376236633464626639356232353631383439383362616434303763373937336538346232336364323235373964643235626634633161303337333464316137623064666463666434340D')
    encrypted_data = bytes(b'356130346539356364306539626630633863646461326362623066353065376462386338396166373931623465383866643635373233376331626534653635393962633463383066643831626462303037653433373433303230613234356435663837646631633233633464313239623635396639306563653261356332326466316236303237333734316266333639346464383039643263343835303330616664633632363834333162323238376335393732333961386539323265623331313734656663616534376561343731303462633930316365613061626232636339656639373464393734663133356162316634383939393436343238313834630D')


if '__name__' == '__main__':
    main()