using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Functions;
using System.Runtime.InteropServices;
using System.IO;
using System.Reflection;
using DeobfuscatorFLARE;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Reflection.Emit;
using AsmResolver.DotNet.Code.Cil;
using AsmResolver.DotNet;
using AsmResolver.PE;
using AsmResolver;
using AsmResolver.DotNet.Serialized;
using AsmResolver.PE.DotNet.Cil;
using System.Runtime.Remoting.Messaging;
using System.Runtime.Serialization;
using System.Runtime.Remoting.Contexts;
using AsmResolver.IO;
using AsmResolver.PE.DotNet.Metadata.Tables.Rows;
using AsmResolver.DotNet.Signatures;
using AsmResolver.PE.DotNet.Metadata.Tables;
using dnlib.DotNet;
using Function2;
using System.Security.Cryptography;
using AsmResolver.PE.File.Headers;
using dnlib.PE;
using static Function2.FLARE06;
using System.Collections;



//What to do ?:
//1.-Develop logic for per function obfuscation.
//		-Generate the function signature from the IL instructions.
//2.-Been able to decrypt the functions successfully.
//      -Get the apropiate metadata token for the "dynamic IL" info
//
// (If in 3 days, no progress is done in terms of deobfuscation, then go for the bruteforce way, dont WASTE too much time.


class FLARE15
{
    public FLARE15()
    {
        this.d_b = new List<byte> { 0, 32, 0, 1, 0, 0, 141, 156, 34, 201, 177, 19, 5, 32, 0, 1, 0, 0, 141, 108, 156, 46, 78, 19, 6, 3, 142, 105, 141, 183, 142, 189, 14, 19, 7, 22, 11, 43, 22, 0, 17, 5, 7, 2, 7, 2, 142, 105, 93, 145, 158, 17, 6, 7, 7, 158, 0, 7, 23, 88, 11, 7, 32, 0, 1, 0, 0, 254, 4, 19, 8, 17, 8, 45, 220, 22, 37, 11, 12, 43, 44, 0, 8, 17, 6, 7, 148, 88, 17, 5, 7, 148, 88, 32, 0, 1, 0, 0, 93, 12, 17, 6, 7, 148, 19, 4, 17, 6, 7, 17, 6, 8, 148, 158, 17, 6, 8, 17, 4, 158, 0, 7, 23, 88, 11, 7, 32, 0, 1, 0, 0, 254, 4, 19, 9, 17, 9, 45, 198, 22, 37, 11, 37, 12, 10, 43, 82, 0, 6, 23, 88, 10, 6, 32, 0, 1, 0, 0, 93, 10, 8, 17, 6, 6, 148, 88, 12, 8, 32, 0, 1, 0, 0, 93, 12, 17, 6, 6, 148, 19, 4, 17, 6, 6, 17, 6, 8, 148, 158, 17, 6, 8, 17, 4, 158, 17, 6, 17, 6, 6, 148, 17, 6, 8, 148, 88, 32, 0, 1, 0, 0, 93, 148, 13, 17, 7, 7, 3, 7, 145, 9, 97, 210, 156, 0, 7, 23, 88, 11, 7, 3, 142, 105, 254, 4, 19, 10, 17, 10, 45, 162, 17, 7, 19, 11, 43, 0, 17, 11, 42 }.ToArray();
        this.gs_b = new List<byte> { 0, 40, 177, 233, 70, 138, 111, 84, 62, 97, 100, 10, 115, 99, 46, 50, 30, 11, 6, 40, 248, 253, 205, 90, 0, 20, 12, 6, 25, 23, 115, 210, 51, 253, 56, 13, 0, 0, 7, 111, 84, 127, 124, 206, 19, 4, 22, 19, 5, 43, 91, 17, 4, 17, 5, 163, 5, 132, 47, 138, 19, 6, 0, 2, 17, 6, 123, 179, 165, 243, 215, 115, 197, 113, 201, 222, 111, 172, 110, 73, 182, 19, 7, 17, 7, 44, 48, 0, 17, 6, 123, 45, 81, 63, 198, 141, 57, 101, 183, 1, 12, 9, 17, 6, 123, 135, 50, 200, 128, 110, 22, 111, 243, 154, 196, 129, 38, 9, 8, 22, 17, 6, 123, 112, 138, 142, 133, 111, 50, 254, 127, 75, 38, 43, 15, 0, 17, 5, 23, 88, 19, 5, 17, 5, 17, 4, 142, 105, 50, 157, 0, 222, 11, 9, 44, 7, 9, 111, 228, 7, 120, 63, 0, 220, 8, 19, 8, 43, 0, 17, 8, 42 }.ToArray();
        this.cl_b = new List<byte> { 0, 115, 10, 217, 189, 252, 37, 31, 88, 22, 111, 13, 114, 68, 205, 0, 37, 32, 214, 0, 0, 0, 22, 111, 41, 222, 199, 79, 0, 37, 32, 215, 0, 0, 0, 22, 111, 191, 122, 21, 244, 0, 37, 31, 95, 22, 111, 35, 35, 46, 22, 0, 37, 32, 0, 254, 0, 0, 22, 111, 225, 100, 53, 248, 0, 37, 31, 59, 25, 111, 109, 217, 171, 203, 0, 37, 31, 46, 24, 111, 215, 70, 221, 19, 0, 37, 31, 60, 25, 111, 4, 158, 149, 64, 0, 37, 31, 47, 24, 111, 25, 231, 234, 34, 0, 37, 31, 65, 25, 111, 143, 165, 87, 55, 0, 37, 31, 52, 24, 111, 155, 197, 51, 76, 0, 37, 31, 61, 25, 111, 96, 22, 251, 78, 0, 37, 31, 48, 24, 111, 69, 229, 128, 170, 0, 37, 31, 66, 25, 111, 154, 51, 85, 53, 0, 37, 31, 53, 24, 111, 53, 224, 204, 216, 0, 37, 31, 62, 25, 111, 147, 59, 228, 160, 0, 37, 31, 49, 24, 111, 184, 149, 252, 94, 0, 37, 31, 67, 25, 111, 216, 133, 125, 167, 0, 37, 31, 54, 24, 111, 69, 133, 125, 175, 0, 37, 31, 63, 25, 111, 181, 175, 116, 254, 0, 37, 31, 50, 24, 111, 52, 113, 206, 33, 0, 37, 31, 68, 25, 111, 28, 157, 210, 36, 0, 37, 31, 55, 24, 111, 83, 132, 241, 166, 0, 37, 31, 64, 25, 111, 192, 135, 220, 183, 0, 37, 31, 51, 24, 111, 40, 189, 13, 10, 0, 37, 32, 140, 0, 0, 0, 23, 111, 45, 74, 180, 126, 0, 37, 31, 56, 25, 111, 178, 206, 222, 253, 0, 37, 31, 43, 24, 111, 89, 7, 209, 223, 0, 37, 23, 22, 111, 161, 42, 72, 168, 0, 37, 31, 57, 25, 111, 239, 119, 133, 182, 0, 37, 31, 44, 24, 111, 221, 200, 46, 220, 0, 37, 31, 58, 25, 111, 180, 123, 177, 17, 0, 37, 31, 45, 24, 111, 28, 204, 83, 4, 0, 37, 31, 40, 23, 111, 85, 168, 6, 75, 0, 37, 31, 41, 23, 111, 133, 90, 142, 129, 0, 37, 31, 111, 23, 111, 214, 87, 16, 90, 0, 37, 31, 116, 23, 111, 166, 53, 216, 178, 0, 37, 32, 1, 254, 0, 0, 22, 111, 14, 203, 241, 219, 0, 37, 32, 2, 254, 0, 0, 22, 111, 215, 91, 107, 29, 0, 37, 32, 3, 254, 0, 0, 22, 111, 205, 189, 105, 145, 0, 37, 32, 195, 0, 0, 0, 22, 111, 184, 209, 101, 109, 0, 37, 32, 4, 254, 0, 0, 22, 111, 13, 158, 52, 141, 0, 37, 32, 5, 254, 0, 0, 22, 111, 41, 103, 13, 231, 0, 37, 32, 22, 254, 0, 0, 23, 111, 86, 54, 71, 173, 0, 37, 32, 211, 0, 0, 0, 22, 111, 115, 79, 239, 209, 0, 37, 31, 103, 22, 111, 35, 116, 37, 194, 0, 37, 31, 104, 22, 111, 143, 130, 251, 60, 0, 37, 31, 105, 22, 111, 1, 201, 22, 221, 0, 37, 31, 106, 22, 111, 232, 239, 157, 239, 0, 37, 32, 212, 0, 0, 0, 22, 111, 11, 143, 46, 32, 0, 37, 32, 138, 0, 0, 0, 22, 111, 9, 85, 212, 115, 0, 37, 32, 179, 0, 0, 0, 22, 111, 147, 239, 71, 241, 0, 37, 32, 130, 0, 0, 0, 22, 111, 218, 57, 122, 211, 0, 37, 32, 181, 0, 0, 0, 22, 111, 231, 152, 32, 159, 0, 37, 32, 131, 0, 0, 0, 22, 111, 103, 39, 166, 7, 0, 37, 32, 183, 0, 0, 0, 22, 111, 249, 73, 14, 8, 0, 37, 32, 132, 0, 0, 0, 22, 111, 33, 169, 220, 140, 0, 37, 32, 185, 0, 0, 0, 22, 111, 15, 15, 152, 213, 0, 37, 32, 133, 0, 0, 0, 22, 111, 137, 22, 219, 66, 0, 37, 32, 213, 0, 0, 0, 22, 111, 239, 100, 234, 200, 0, 37, 32, 139, 0, 0, 0, 22, 111, 111, 38, 70, 15, 0, 37, 32, 180, 0, 0, 0, 22, 111, 116, 213, 65, 92, 0, 37, 32, 134, 0, 0, 0, 22, 111, 1, 17, 80, 243, 0, 37, 32, 182, 0, 0, 0, 22, 111, 252, 158, 242, 151, 0, 37, 32, 135, 0, 0, 0, 22, 111, 203, 124, 102, 178, 0, 37, 32, 184, 0, 0, 0, 22, 111, 172, 78, 2, 71, 0, 37, 32, 136, 0, 0, 0, 22, 111, 185, 233, 192, 33, 0, 37, 32, 186, 0, 0, 0, 22, 111, 0, 231, 123, 13, 0, 37, 32, 137, 0, 0, 0, 22, 111, 45, 111, 167, 149, 0, 37, 31, 118, 22, 111, 201, 84, 196, 111, 0, 37, 31, 107, 22, 111, 55, 30, 68, 64, 0, 37, 31, 108, 22, 111, 104, 222, 55, 57, 0, 37, 32, 224, 0, 0, 0, 22, 111, 119, 208, 234, 17, 0, 37, 32, 210, 0, 0, 0, 22, 111, 35, 151, 152, 151, 0, 37, 32, 209, 0, 0, 0, 22, 111, 64, 196, 90, 148, 0, 37, 31, 109, 22, 111, 168, byte.MaxValue, 244, 114, 0, 37, 31, 110, 22, 111, 77, 26, 35, 204, 0, 37, 32, 23, 254, 0, 0, 22, 111, 141, 32, 0, 74, 0, 37, 31, 112, 23, 111, 92, 68, 57, 2, 0, 37, 31, 91, 22, 111, 137, 111, 108, 175, 0, 37, 31, 92, 22, 111, 203, 181, 26, 174, 0, 37, 31, 37, 22, 111, 196, 104, 41, 36, 0, 37, 32, 17, 254, 0, 0, 22, 111, 225, 76, 102, 19, 0, 37, 32, 220, 0, 0, 0, 22, 111, 57, 38, 208, 219, 0, 37, 32, 24, 254, 0, 0, 22, 111, 242, 61, 200, 41, 0, 37, 32, 21, 254, 0, 0, 23, 111, 116, 211, 35, 226, 0, 37, 31, 117, 23, 111, 99, 132, 82, 210, 0, 37, 31, 39, 23, 111, 71, 131, 197, 60, 0, 37, 32, 9, 254, 0, 0, 27, 111, 65, 65, 91, 181, 0, 37, 24, 22, 111, 239, 240, 133, 104, 0, 37, 25, 22, 111, 137, 180, 186, 158, 0, 37, 26, 22, 111, 28, 108, 85, 37, 0, 37, 27, 22, 111, 153, 103, byte.MaxValue, 59, 0, 37, 31, 14, 26, 111, 116, 211, 208, 34, 0, 37, 32, 10, 254, 0, 0, 27, 111, 80, 216, 189, 127, 0, 37, 31, 15, 26, 111, 69, 206, 177, 38, 0, 37, 31, 32, 28, 111, 22, 221, 217, 159, 0, 37, 31, 22, 22, 111, 30, 116, 99, 248, 0, 37, 31, 23, 22, 111, 254, 161, 173, 200, 0, 37, 31, 24, 22, 111, 54, 201, 38, 159, 0, 37, 31, 25, 22, 111, 45, 58, 149, 36, 0, 37, 31, 26, 22, 111, 150, 117, 142, 88, 0, 37, 31, 27, 22, 111, 221, 184, 133, 95, 0, 37, 31, 28, 22, 111, 219, 66, 147, 246, 0, 37, 31, 29, 22, 111, 97, 158, 84, 37, 0, 37, 31, 30, 22, 111, 216, 145, 132, 134, 0, 37, 31, 21, 22, 111, 245, 171, 121, 202, 0, 37, 31, 31, 26, 111, 211, 169, 172, 36, 0, 37, 31, 33, 29, 111, 33, 178, 226, 220, 0, 37, 31, 34, 28, 111, 24, 249, 193, 57, 0, 37, 31, 35, 29, 111, 85, 101, 46, 240, 0, 37, 32, 163, 0, 0, 0, 23, 111, 211, 172, 231, 134, 0, 37, 32, 151, 0, 0, 0, 22, 111, 167, 174, 223, 236, 0, 37, 32, 144, 0, 0, 0, 22, 111, 204, 195, 58, 96, 0, 37, 32, 146, 0, 0, 0, 22, 111, 134, 235, 1, 158, 0, 37, 32, 148, 0, 0, 0, 22, 111, 166, 114, 230, 146, 0, 37, 32, 150, 0, 0, 0, 22, 111, 254, 67, 59, 58, 0, 37, 32, 152, 0, 0, 0, 22, 111, 222, 23, 103, 29, 0, 37, 32, 153, 0, 0, 0, 22, 111, 215, 144, 192, 99, 0, 37, 32, 154, 0, 0, 0, 22, 111, 67, 133, 131, 128, 0, 37, 32, 145, 0, 0, 0, 22, 111, 46, 175, 210, 166, 0, 37, 32, 147, 0, 0, 0, 22, 111, 134, 213, 80, 49, 0, 37, 32, 149, 0, 0, 0, 22, 111, 161, 209, 1, 172, 0, 37, 32, 143, 0, 0, 0, 23, 111, 158, 176, 236, 166, 0, 37, 31, 123, 23, 111, 242, 46, 42, 252, 0, 37, 31, 124, 23, 111, 209, 221, 127, 233, 0, 37, 32, 6, 254, 0, 0, 23, 111, 214, 95, 181, 218, 0, 37, 31, 77, 22, 111, 244, 199, 66, 184, 0, 37, 31, 70, 22, 111, 93, 9, byte.MaxValue, 225, 0, 37, 31, 72, 22, 111, 127, 90, 216, 172, 0, 37, 31, 74, 22, 111, 54, 250, 200, 214, 0, 37, 31, 76, 22, 111, 137, 51, 178, 165, 0, 37, 31, 78, 22, 111, 55, 225, 5, 18, 0, 37, 31, 79, 22, 111, 30, 133, 166, 176, 0, 37, 31, 80, 22, 111, 146, 26, 31, 108, 0, 37, 31, 71, 22, 111, 219, 22, 129, 63, 0, 37, 31, 73, 22, 111, 26, 69, 177, 73, 0, 37, 31, 75, 22, 111, 79, 243, 62, 189, 0, 37, 32, 142, 0, 0, 0, 22, 111, 146, 29, 1, 4, 0, 37, 32, 12, 254, 0, 0, 27, 111, 125, 170, 200, 20, 0, 37, 28, 22, 111, 249, 232, 19, 131, 0, 37, 29, 22, 111, 95, 240, 234, 166, 0, 37, 30, 22, 111, 215, 129, 105, 73, 0, 37, 31, 9, 22, 111, 55, 203, 168, 192, 0, 37, 31, 17, 26, 111, 160, 35, 135, 0, 0, 37, 32, 13, 254, 0, 0, 27, 111, 89, 122, 49, 195, 0, 37, 31, 18, 26, 111, 129, 177, 224, 231, 0, 37, 31, 20, 22, 111, 76, 126, 245, 99, 0, 37, 31, 113, 23, 111, 9, 67, 77, 149, 0, 37, 31, 126, 23, 111, 37, 94, 102, 130, 0, 37, 31, 127, 23, 111, 168, 90, 82, 98, 0, 37, 31, 114, 23, 111, 164, 205, 46, 96, 0, 37, 32, 208, 0, 0, 0, 23, 111, 210, 51, 141, 181, 0, 37, 32, 7, 254, 0, 0, 23, 111, 234, 63, 117, 120, 0, 37, 32, 221, 0, 0, 0, 25, 111, 106, 49, 229, 158, 0, 37, 32, 222, 0, 0, 0, 24, 111, 152, 13, 156, 5, 0, 37, 32, 15, 254, 0, 0, 22, 111, 197, 136, 94, 64, 0, 37, 32, 198, 0, 0, 0, 23, 111, 41, 82, 197, 79, 0, 37, 31, 90, 22, 111, 122, 82, 96, 167, 0, 37, 32, 216, 0, 0, 0, 22, 111, 15, 51, 82, 187, 0, 37, 32, 217, 0, 0, 0, 22, 111, 82, 54, 216, 249, 0, 37, 31, 101, 22, 111, 125, 1, 38, 175, 0, 37, 32, 141, 0, 0, 0, 23, 111, 234, 176, byte.MaxValue, 135, 0, 37, 31, 115, 23, 111, 88, 145, 191, 47, 0, 37, 32, 25, 254, 0, 0, 26, 111, 252, 170, 59, 207, 0, 37, 22, 22, 111, 151, 36, 155, 252, 0, 37, 31, 102, 22, 111, 82, 167, 127, 169, 0, 37, 31, 96, 22, 111, 234, 144, 210, 243, 0, 37, 31, 38, 22, 111, 3, 84, 113, 234, 0, 37, 32, 254, 0, 0, 0, 22, 111, 64, byte.MaxValue, 248, 204, 0, 37, 32, 253, 0, 0, 0, 22, 111, 245, 19, 171, 61, 0, 37, 32, 252, 0, 0, 0, 22, 111, 142, 82, 230, 51, 0, 37, 32, 251, 0, 0, 0, 22, 111, 181, 18, 112, 170, 0, 37, 32, 250, 0, 0, 0, 22, 111, 123, 0, 224, 207, 0, 37, 32, 249, 0, 0, 0, 22, 111, 190, 152, 72, 213, 0, 37, 32, 248, 0, 0, 0, 22, 111, 68, 98, 172, 15, 0, 37, 32, byte.MaxValue, 0, 0, 0, 22, 111, 203, 50, 67, 48, 0, 37, 32, 30, 254, 0, 0, 22, 111, 220, 33, 119, 193, 0, 37, 32, 29, 254, 0, 0, 22, 111, 35, 72, 178, 126, 0, 37, 32, 194, 0, 0, 0, 23, 111, 2, 57, 185, 56, 0, 37, 31, 93, 22, 111, 230, 205, 207, 149, 0, 37, 31, 94, 22, 111, 45, 128, 208, 131, 0, 37, 31, 42, 22, 111, 2, 162, 51, 216, 0, 37, 32, 26, 254, 0, 0, 22, 111, 34, 220, 10, 80, 0, 37, 31, 98, 22, 111, 88, 24, 78, 30, 0, 37, 31, 99, 22, 111, 86, 101, 203, 254, 0, 37, 31, 100, 22, 111, 90, 152, 56, 222, 0, 37, 32, 28, 254, 0, 0, 23, 111, 0, 77, 5, 131, 0, 37, 32, 11, 254, 0, 0, 27, 111, 226, 73, 155, 38, 0, 37, 31, 16, 26, 111, 57, 19, 174, 233, 0, 37, 32, 164, 0, 0, 0, 23, 111, 46, 169, 32, 41, 0, 37, 32, 155, 0, 0, 0, 22, 111, 8, 175, 154, 44, 0, 37, 32, 156, 0, 0, 0, 22, 111, 32, 224, 156, 61, 0, 37, 32, 157, 0, 0, 0, 22, 111, 126, 90, 48, 79, 0, 37, 32, 158, 0, 0, 0, 22, 111, 124, 42, 50, 68, 0, 37, 32, 159, 0, 0, 0, 22, 111, 222, 89, 126, 211, 0, 37, 32, 160, 0, 0, 0, 22, 111, 0, 149, 194, 176, 0, 37, 32, 161, 0, 0, 0, 22, 111, 188, 105, 198, 185, 0, 37, 32, 162, 0, 0, 0, 22, 111, 151, 174, 206, 68, 0, 37, 31, 125, 23, 111, 173, 33, 18, 208, 0, 37, 32, 223, 0, 0, 0, 22, 111, 251, 104, 129, 47, 0, 37, 31, 82, 22, 111, 9, 128, 4, 214, 0, 37, 31, 83, 22, 111, 137, 125, 234, 136, 0, 37, 31, 84, 22, 111, 82, 78, 30, 213, 0, 37, 31, 85, 22, 111, 146, 144, 213, 143, 0, 37, 31, 86, 22, 111, 82, 226, 117, 11, 0, 37, 31, 87, 22, 111, 179, 163, 31, 6, 0, 37, 31, 81, 22, 111, 89, 206, 193, 21, 0, 37, 32, 14, 254, 0, 0, 27, 111, 49, 11, 127, 162, 0, 37, 31, 10, 22, 111, 181, 171, 239, 2, 0, 37, 31, 11, 22, 111, 92, 57, 252, 48, 0, 37, 31, 12, 22, 111, 167, 42, 36, 236, 0, 37, 31, 13, 22, 111, 124, 67, 69, 200, 0, 37, 31, 19, 26, 111, 3, 214, 231, 72, 0, 37, 32, 129, 0, 0, 0, 23, 111, 254, 187, 37, 203, 0, 37, 32, 128, 0, 0, 0, 23, 111, 145, 18, 82, 9, 0, 37, 31, 89, 22, 111, 74, 152, 213, 245, 0, 37, 32, 218, 0, 0, 0, 22, 111, 235, 250, 206, 19, 0, 37, 32, 219, 0, 0, 0, 22, 111, 59, 48, 51, 2, 0, 37, 31, 69, 30, 111, 239, 38, 90, 93, 0, 37, 32, 20, 254, 0, 0, 22, 111, 65, 153, 216, 144, 0, 37, 31, 122, 22, 111, 254, 251, 227, 240, 0, 37, 32, 18, 254, 0, 0, 26, 111, 14, 137, 151, 16, 0, 37, 31, 121, 23, 111, 164, 195, 184, 228, 0, 37, 32, 165, 0, 0, 0, 23, 111, 59, 135, 41, 120, 0, 37, 32, 19, 254, 0, 0, 22, 111, 0, 206, 114, 167, 0, 37, 31, 97, 22, 111, 78, 4, 207, 16, 0, 10, 22, 11, 22, 12, 22, 13, 208, 97, 25, 176, 183, 40, 54, 171, 60, 233, 111, 36, 203, 185, 93, 19, 4, 17, 4, 3, 111, 52, 77, 94, 12, 19, 5, 17, 5, 116, 244, 120, 90, 73, 19, 6, 17, 6, 111, 180, 254, 162, 23, 19, 7, 17, 7, 142, 105, 141, 95, 56, 141, 35, 19, 8, 40, 166, 156, 102, 122, 19, 9, 22, 19, 15, 43, 23, 0, 17, 8, 17, 15, 17, 7, 17, 15, 154, 111, 75, 201, 251, 39, 162, 0, 17, 15, 23, 88, 19, 15, 17, 15, 17, 8, 142, 105, 254, 4, 19, 16, 17, 16, 45, 219, 17, 5, 111, 139, 216, 26, 92, 19, 10, 114, 209, 50, 51, 207, 17, 6, 111, 71, 196, 11, 107, 17, 8, 17, 10, 23, 115, 151, 186, 190, 52, 19, 11, 17, 11, 111, 59, 196, 241, 23, 19, 12, 17, 6, 111, 26, 6, 88, 12, 19, 13, 0, 17, 13, 111, 179, 204, 113, 2, 111, 163, 213, 206, 88, 19, 17, 43, 26, 17, 17, 111, 6, 63, 229, 90, 19, 18, 0, 17, 9, 17, 18, 111, 162, 170, 109, 69, 111, 62, 170, 231, 74, 0, 0, 17, 17, 111, 38, 165, 40, 98, 45, 221, 222, 13, 17, 17, 44, 8, 17, 17, 111, 129, 105, 26, 215, 0, 220, 17, 9, 111, 43, 199, 18, 117, 19, 14, 17, 12, 17, 14, 111, 108, 40, 145, 232, 0, 22, 19, 19, 56, 158, 2, 0, 0, 0, 2, 17, 19, 145, 32, 254, 0, 0, 0, 254, 1, 19, 21, 17, 21, 44, 23, 0, 32, 0, 254, 0, 0, 2, 17, 19, 23, 88, 145, 88, 11, 17, 19, 23, 88, 19, 19, 0, 43, 7, 0, 2, 17, 19, 145, 11, 0, 6, 7, 111, 162, 49, 127, 173, 19, 20, 17, 19, 23, 88, 19, 19, 17, 20, 19, 23, 17, 23, 19, 22, 17, 22, 69, 9, 0, 0, 0, 27, 0, 0, 0, 65, 0, 0, 0, 5, 0, 0, 0, 16, 0, 0, 0, 5, 0, 0, 0, 35, 2, 0, 0, 16, 0, 0, 0, 32, 0, 0, 0, 43, 0, 0, 0, 56, 38, 2, 0, 0, 17, 19, 23, 88, 19, 19, 56, 27, 2, 0, 0, 17, 19, 26, 88, 19, 19, 56, 16, 2, 0, 0, 56, 11, 2, 0, 0, 17, 19, 30, 88, 19, 19, 56, 0, 2, 0, 0, 17, 19, 26, 2, 17, 19, 40, 142, 69, 11, 75, 26, 90, 88, 88, 19, 19, 56, 234, 1, 0, 0, 2, 17, 19, 40, 52, 70, 131, 195, 12, 8, 32, 189, 166, 152, 162, 97, 12, 8, 32, 0, 0, 0, 112, 55, 10, 8, 32, byte.MaxValue, byte.MaxValue, 0, 112, 254, 5, 43, 1, 22, 19, 24, 17, 24, 44, 23, 0, 17, 12, 17, 4, 8, 111, 249, 18, 160, 108, 111, 4, 240, 174, 194, 13, 0, 56, 115, 1, 0, 0, 0, 17, 6, 111, 111, 254, 134, 166, 19, 25, 20, 19, 26, 20, 19, 27, 17, 25, 111, 64, 160, 236, 229, 45, 9, 17, 25, 111, 18, 89, 82, 146, 43, 1, 23, 19, 29, 17, 29, 44, 9, 17, 25, 111, 117, 82, 4, 161, 19, 26, 17, 6, 111, 74, 165, 17, byte.MaxValue, 45, 9, 17, 6, 111, 193, 33, 245, 78, 43, 1, 23, 19, 30, 17, 30, 44, 9, 17, 6, 111, 47, 208, 183, 148, 19, 27, 17, 25, 111, 192, 134, 43, 254, 8, 17, 26, 17, 27, 111, 197, 209, 0, 127, 19, 28, 17, 28, 111, 33, 5, 221, 41, 111, 223, 70, 37, 146, 114, 11, 162, 135, 32, 40, 144, 206, 249, 171, 19, 31, 17, 31, 44, 49, 0, 17, 12, 17, 28, 116, 162, 68, 213, 176, 111, 191, 1, 250, 105, 17, 28, 116, 111, 31, 55, 56, 111, 157, 190, 101, 156, 116, 167, 196, 237, 2, 111, 121, 135, 143, 75, 111, 45, byte.MaxValue, 3, 252, 13, 0, 56, 190, 0, 0, 0, 17, 28, 111, 56, 60, 119, 116, 111, 151, 136, 152, 169, 114, 228, 123, 153, 56, 40, 46, 176, 28, 43, 19, 32, 17, 32, 44, 27, 0, 17, 12, 17, 28, 116, 64, 106, 172, 11, 111, 40, 252, 155, 82, 111, 196, 178, 108, 183, 13, 0, 56, 135, 0, 0, 0, 17, 28, 111, 239, 91, 182, 3, 114, 206, 219, 53, 34, 40, 131, 251, 201, 136, 45, 19, 17, 28, 111, 92, 56, 192, 109, 114, 130, 120, 22, 165, 40, 32, 190, 70, 134, 43, 1, 23, 19, 33, 17, 33, 44, 46, 0, 17, 12, 17, 28, 116, 174, 223, 96, 200, 111, 185, 21, 232, 43, 17, 28, 116, 174, 172, 211, 246, 111, 195, 113, 80, 0, 116, 132, 197, 186, 171, 111, 117, 208, 216, 121, 111, 173, 162, 81, 157, 13, 0, 43, 44, 0, 17, 12, 17, 28, 116, 51, 214, 134, 221, 111, 98, 208, 14, 39, 17, 28, 116, 186, 197, 139, 172, 111, 148, 216, 88, 171, 116, 180, 20, 205, 132, 111, 154, 13, 88, 176, 111, 71, 39, 80, 34, 13, 0, 0, 2, 17, 19, 9, 210, 156, 2, 17, 19, 23, 88, 9, 30, 99, 210, 156, 2, 17, 19, 24, 88, 9, 31, 16, 99, 210, 156, 2, 17, 19, 25, 88, 9, 31, 24, 99, 210, 156, 17, 19, 26, 88, 19, 19, 43, 8, 17, 19, 24, 88, 19, 19, 43, 0, 0, 17, 19, 2, 142, 105, 254, 4, 19, 34, 17, 34, 58, 82, 253, byte.MaxValue, byte.MaxValue, 17, 12, 2, 17, 13, 111, 27, 115, 156, 76, 111, 92, 158, byte.MaxValue, 169, 0, 17, 11, 20, 4, 111, 58, 3, 229, 190, 19, 35, 43, 0, 17, 35, 42 }.ToArray();
        this.wl_b = new List<byte> { 0, 2, 115, 210, 91, 118, 145, 10, 6, 22, 111, 214, 250, 98, 120, 111, 1, 32, 216, 164, 111, 116, 180, 252, 125, 11, 7, 40, 13, 133, 229, 201, 12, 8, 40, 157, 90, 105, 252, 13, 26, 141, 225, 92, 24, 151, 37, 208, 81, 66, 113, 247, 40, 49, 171, 223, 109, 9, 40, 58, 74, 2, 192, 19, 4, 17, 4, 7, 3, 40, 92, 181, 106, 133, 19, 5, 17, 5, 19, 6, 43, 0, 17, 6, 42 }.ToArray();
        this.pe_b = new List<byte> { 0, 2, 25, 23, 115, 119, 47, 15, 154, 10, 0, 6, 115, 211, 224, 138, 191, 11, 7, 40, 151, 93, 51, 31, 128, 152, 141, 186, 185, 6, 127, 138, 182, 133, 37, 123, 72, 36, 118, 82, 110, 22, 111, 53, 23, 44, 228, 38, 7, 111, 23, 185, 200, 13, 12, 7, 40, 250, 238, 144, 9, 128, 23, 250, 35, 175, 7, 40, 217, 239, 64, 239, 128, 182, 59, 215, 174, 127, 218, 219, 105, 145, 123, 21, 114, 195, 250, 141, 136, 154, 143, 99, 128, 204, 176, 25, 93, 22, 13, 43, 23, 0, 126, 116, 190, 10, 2, 9, 7, 40, 196, 44, 30, 245, 164, 213, 11, 104, 44, 0, 9, 23, 88, 13, 9, 126, 244, 204, 152, 188, 142, 105, 254, 4, 19, 4, 17, 4, 45, 217, 0, 222, 11, 6, 44, 7, 6, 111, 81, 24, 131, 54, 0, 220, 42 }.ToArray();
        this.gh_b = new List<byte> { 0, 208, 176, 188, 246, 233, 40, 84, 178, 8, 145, 111, 122, 235, 77, 65, 10, 20, 11, 20, 12, 114, 6, 75, 113, 117, 13, 114, 98, 126, 233, 246, 19, 4, 6, 2, 111, 229, 106, 176, 156, 116, 121, 86, 154, 68, 11, 7, 111, 253, 154, 86, 107, 12, 40, 65, 145, 74, 3, 7, 111, 200, 128, 36, 247, 19, 15, 18, 15, 254, 22, 197, 225, 24, 179, 111, 254, 60, 67, 167, 111, 23, 60, 233, 127, 19, 5, 40, 149, 146, 41, 173, 7, 111, 77, 105, 0, 180, 111, 117, 31, 72, 251, 111, 70, 79, 172, 60, 19, 6, 40, 215, 94, 235, 15, 7, 111, 39, 210, 216, 192, 19, 16, 18, 16, 254, 22, 221, 228, 243, 232, 111, 159, 122, 0, 85, 111, 0, 118, 254, 171, 19, 7, 0, 7, 111, 151, 128, 86, 214, 19, 17, 22, 19, 18, 43, 43, 17, 17, 17, 18, 154, 19, 19, 0, 17, 4, 17, 19, 111, 197, 194, 71, 24, 37, 45, 4, 38, 20, 43, 5, 111, 103, 178, 142, 178, 40, 57, 109, 122, 25, 19, 4, 0, 17, 18, 23, 88, 19, 18, 17, 18, 17, 17, 142, 105, 50, 205, 40, 149, 141, 234, byte.MaxValue, 8, 111, byte.MaxValue, 16, 14, 184, 19, 20, 18, 20, 40, 224, 179, 165, 204, 111, 47, 44, 83, 163, 19, 8, 8, 111, 136, 254, 191, 71, 142, 105, 40, 93, 121, 185, 190, 19, 9, 0, 8, 111, 84, 53, 102, 100, 111, 244, 194, 115, 32, 19, 21, 43, 37, 17, 21, 111, 169, 238, 110, 172, 19, 22, 0, 9, 17, 22, 111, 227, 85, 252, 169, 37, 45, 4, 38, 20, 43, 5, 111, 40, 53, 35, 164, 40, 247, 181, 227, 36, 13, 0, 17, 21, 111, 70, 130, 159, 230, 45, 210, 222, 13, 17, 21, 44, 8, 17, 21, 111, 35, 7, 128, 243, 0, 220, 40, 220, 104, 115, 57, 9, 111, 212, 248, 224, 138, 19, 10, 40, 109, 242, 46, 42, 17, 4, 111, 219, 222, 186, 118, 19, 11, 40, 172, 32, 162, 224, 40, 37, 31, 226, 37, 19, 12, 17, 12, 17, 9, 111, 195, 113, 37, 4, 0, 17, 12, 17, 5, 111, 25, 235, 55, 187, 0, 17, 12, 17, 6, 111, 175, 75, 83, 242, 0, 17, 12, 17, 8, 111, 48, 11, 207, 94, 0, 17, 12, 17, 10, 111, 244, 228, 47, 31, 0, 17, 12, 17, 11, 111, 106, 13, 216, 64, 0, 17, 12, 17, 7, 111, 51, 114, 101, 249, 0, 17, 12, 111, 141, 77, 241, 89, 19, 13, 17, 13, 142, 105, 24, 90, 115, 159, 208, 46, 212, 19, 14, 22, 19, 23, 43, 33, 17, 14, 17, 13, 17, 23, 143, 211, 100, 111, 59, 114, 242, 107, 23, 209, 40, 40, 166, 19, 214, 111, 240, 83, 19, 21, 38, 17, 23, 23, 88, 19, 23, 17, 23, 17, 13, 142, 105, 254, 4, 19, 24, 17, 24, 45, 209, 17, 14, 111, 93, 93, 1, 176, 19, 25, 43, 0, 17, 25, 42 }.ToArray();
        this.rt_b = new List<byte> { 0, 22, 10, 2, 3, 25, 88, 145, 32, 0, 0, 0, 1, 90, 10, 6, 2, 3, 24, 88, 145, 32, 0, 0, 1, 0, 90, 88, 10, 6, 2, 3, 23, 88, 145, 32, 0, 1, 0, 0, 90, 88, 10, 6, 2, 3, 145, 88, 10, 6, 11, 43, 0, 7, 42 }.ToArray();
        this.d_m = new Dictionary<uint, int> { { 7U, 16777274 }, { 19U, 16777274 }, { 29U, 16777263 } };
        this.gs_m = new Dictionary<uint, int> { { 2U, 167772387 }, { 7U, 167772267 }, { 13U, 100663397 }, { 20U, 100663385 }, { 31U, 167772263 }, { 40U, 100663395 }, { 56U, 33554458 }, { 67U, 67109087 }, { 72U, 167772183 }, { 77U, 167772388 }, { 91U, 67109088 }, { 96U, 16777263 }, { 105U, 67109091 }, { 112U, 167772246 }, { 123U, 67109088 }, { 128U, 167772247 }, { 158U, 167772230 } };
        this.cl_m = new Dictionary<uint, int> { { 2U, 167772358 }, { 11U, 167772359 }, { 24U, 167772359 }, { 37U, 167772359 }, { 47U, 167772359 }, { 60U, 167772359 }, { 70U, 167772359 }, { 80U, 167772359 }, { 90U, 167772359 }, { 100U, 167772359 }, { 110U, 167772359 }, { 120U, 167772359 }, { 130U, 167772359 }, { 140U, 167772359 }, { 150U, 167772359 }, { 160U, 167772359 }, { 170U, 167772359 }, { 180U, 167772359 }, { 190U, 167772359 }, { 200U, 167772359 }, { 210U, 167772359 }, { 220U, 167772359 }, { 230U, 167772359 }, { 240U, 167772359 }, { 250U, 167772359 }, { 260U, 167772359 }, { 273U, 167772359 }, { 283U, 167772359 }, { 293U, 167772359 }, { 302U, 167772359 }, { 312U, 167772359 }, { 322U, 167772359 }, { 332U, 167772359 }, { 342U, 167772359 }, { 352U, 167772359 }, { 362U, 167772359 }, { 372U, 167772359 }, { 382U, 167772359 }, { 395U, 167772359 }, { 408U, 167772359 }, { 421U, 167772359 }, { 434U, 167772359 }, { 447U, 167772359 }, { 460U, 167772359 }, { 473U, 167772359 }, { 486U, 167772359 }, { 496U, 167772359 }, { 506U, 167772359 }, { 516U, 167772359 }, { 526U, 167772359 }, { 539U, 167772359 }, { 552U, 167772359 }, { 565U, 167772359 }, { 578U, 167772359 }, { 591U, 167772359 }, { 604U, 167772359 }, { 617U, 167772359 }, { 630U, 167772359 }, { 643U, 167772359 }, { 656U, 167772359 }, { 669U, 167772359 }, { 682U, 167772359 }, { 695U, 167772359 }, { 708U, 167772359 }, { 721U, 167772359 }, { 734U, 167772359 }, { 747U, 167772359 }, { 760U, 167772359 }, { 773U, 167772359 }, { 786U, 167772359 }, { 796U, 167772359 }, { 806U, 167772359 }, { 816U, 167772359 }, { 829U, 167772359 }, { 842U, 167772359 }, { 855U, 167772359 }, { 865U, 167772359 }, { 875U, 167772359 }, { 888U, 167772359 }, { 898U, 167772359 }, { 908U, 167772359 }, { 918U, 167772359 }, { 928U, 167772359 }, { 941U, 167772359 }, { 954U, 167772359 }, { 967U, 167772359 }, { 980U, 167772359 }, { 990U, 167772359 }, { 1000U, 167772359 }, { 1013U, 167772359 }, { 1022U, 167772359 }, { 1031U, 167772359 }, { 1040U, 167772359 }, { 1049U, 167772359 }, { 1059U, 167772359 }, { 1072U, 167772359 }, { 1082U, 167772359 }, { 1092U, 167772359 }, { 1102U, 167772359 }, { 1112U, 167772359 }, { 1122U, 167772359 }, { 1132U, 167772359 }, { 1142U, 167772359 }, { 1152U, 167772359 }, { 1162U, 167772359 }, { 1172U, 167772359 }, { 1182U, 167772359 }, { 1192U, 167772359 }, { 1202U, 167772359 }, { 1212U, 167772359 }, { 1222U, 167772359 }, { 1232U, 167772359 }, { 1245U, 167772359 }, { 1258U, 167772359 }, { 1271U, 167772359 }, { 1284U, 167772359 }, { 1297U, 167772359 }, { 1310U, 167772359 }, { 1323U, 167772359 }, { 1336U, 167772359 }, { 1349U, 167772359 }, { 1362U, 167772359 }, { 1375U, 167772359 }, { 1388U, 167772359 }, { 1401U, 167772359 }, { 1411U, 167772359 }, { 1421U, 167772359 }, { 1434U, 167772359 }, { 1444U, 167772359 }, { 1454U, 167772359 }, { 1464U, 167772359 }, { 1474U, 167772359 }, { 1484U, 167772359 }, { 1494U, 167772359 }, { 1504U, 167772359 }, { 1514U, 167772359 }, { 1524U, 167772359 }, { 1534U, 167772359 }, { 1544U, 167772359 }, { 1557U, 167772359 }, { 1570U, 167772359 }, { 1579U, 167772359 }, { 1588U, 167772359 }, { 1597U, 167772359 }, { 1607U, 167772359 }, { 1617U, 167772359 }, { 1630U, 167772359 }, { 1640U, 167772359 }, { 1650U, 167772359 }, { 1660U, 167772359 }, { 1670U, 167772359 }, { 1680U, 167772359 }, { 1690U, 167772359 }, { 1703U, 167772359 }, { 1716U, 167772359 }, { 1729U, 167772359 }, { 1742U, 167772359 }, { 1755U, 167772359 }, { 1768U, 167772359 }, { 1778U, 167772359 }, { 1791U, 167772359 }, { 1804U, 167772359 }, { 1814U, 167772359 }, { 1827U, 167772359 }, { 1837U, 167772359 }, { 1850U, 167772359 }, { 1859U, 167772359 }, { 1869U, 167772359 }, { 1879U, 167772359 }, { 1889U, 167772359 }, { 1902U, 167772359 }, { 1915U, 167772359 }, { 1928U, 167772359 }, { 1941U, 167772359 }, { 1954U, 167772359 }, { 1967U, 167772359 }, { 1980U, 167772359 }, { 1993U, 167772359 }, { 2006U, 167772359 }, { 2019U, 167772359 }, { 2032U, 167772359 }, { 2042U, 167772359 }, { 2052U, 167772359 }, { 2062U, 167772359 }, { 2075U, 167772359 }, { 2085U, 167772359 }, { 2095U, 167772359 }, { 2105U, 167772359 }, { 2118U, 167772359 }, { 2131U, 167772359 }, { 2141U, 167772359 }, { 2154U, 167772359 }, { 2167U, 167772359 }, { 2180U, 167772359 }, { 2193U, 167772359 }, { 2206U, 167772359 }, { 2219U, 167772359 }, { 2232U, 167772359 }, { 2245U, 167772359 }, { 2258U, 167772359 }, { 2268U, 167772359 }, { 2281U, 167772359 }, { 2291U, 167772359 }, { 2301U, 167772359 }, { 2311U, 167772359 }, { 2321U, 167772359 }, { 2331U, 167772359 }, { 2341U, 167772359 }, { 2351U, 167772359 }, { 2364U, 167772359 }, { 2374U, 167772359 }, { 2384U, 167772359 }, { 2394U, 167772359 }, { 2404U, 167772359 }, { 2414U, 167772359 }, { 2427U, 167772359 }, { 2440U, 167772359 }, { 2450U, 167772359 }, { 2463U, 167772359 }, { 2476U, 167772359 }, { 2486U, 167772359 }, { 2499U, 167772359 }, { 2509U, 167772359 }, { 2522U, 167772359 }, { 2532U, 167772359 }, { 2545U, 167772359 }, { 2558U, 167772359 }, { 2568U, 167772359 }, { 2581U, 33554460 }, { 2586U, 167772268 }, { 2591U, 167772339 }, { 2601U, 167772340 }, { 2610U, 16777324 }, { 2619U, 167772345 }, { 2630U, 16777298 }, { 2637U, 167772360 }, { 2659U, 167772346 }, { 2688U, 167772361 }, { 2695U, 1879048209 }, { 2702U, 167772343 }, { 2712U, 167772362 }, { 2721U, 167772363 }, { 2730U, 167772341 }, { 2740U, 167772350 }, { 2745U, 167772351 }, { 2756U, 167772352 }, { 2768U, 167772353 }, { 2773U, 167772364 }, { 2782U, 167772354 }, { 2797U, 167772230 }, { 2806U, 167772365 }, { 2817U, 167772366 }, { 2881U, 167772367 }, { 2994U, 100663479 }, { 3013U, 100663479 }, { 3058U, 167772368 }, { 3063U, 167772369 }, { 3078U, 167772361 }, { 3093U, 167772370 }, { 3102U, 167772371 }, { 3118U, 167772372 }, { 3127U, 167772373 }, { 3136U, 167772374 }, { 3152U, 167772375 }, { 3161U, 167772339 }, { 3171U, 167772376 }, { 3180U, 167772377 }, { 3185U, 167772378 }, { 3190U, 1879060566 }, { 3195U, 167772234 }, { 3211U, 16777338 }, { 3216U, 167772379 }, { 3223U, 16777338 }, { 3228U, 167772361 }, { 3233U, 16777339 }, { 3238U, 167772380 }, { 3243U, 167772381 }, { 3257U, 167772377 }, { 3262U, 167772378 }, { 3267U, 1879060590 }, { 3272U, 167772234 }, { 3288U, 16777339 }, { 3293U, 167772380 }, { 3298U, 167772382 }, { 3312U, 167772378 }, { 3317U, 1879060614 }, { 3322U, 167772234 }, { 3331U, 167772378 }, { 3336U, 1879060626 }, { 3341U, 167772234 }, { 3360U, 16777340 }, { 3365U, 167772383 }, { 3372U, 16777340 }, { 3377U, 167772361 }, { 3382U, 16777339 }, { 3387U, 167772380 }, { 3392U, 167772384 }, { 3406U, 16777324 }, { 3411U, 167772383 }, { 3418U, 16777324 }, { 3423U, 167772361 }, { 3428U, 16777339 }, { 3433U, 167772380 }, { 3438U, 167772384 }, { 3522U, 167772347 }, { 3527U, 167772385 }, { 3537U, 167772386 } };
        this.wl_m = new Dictionary<uint, int> { { 3U, 167772389 }, { 11U, 167772323 }, { 16U, 167772324 }, { 21U, 167772390 }, { 28U, 100663475 }, { 35U, 100663481 }, { 42U, 16777263 }, { 48U, 67109184 }, { 53U, 167772306 }, { 59U, 100663424 }, { 70U, 100663477 } };
        this.pe_m = new Dictionary<uint, int> { { 5U, 167772263 }, { 13U, 167772264 }, { 20U, 721420295 }, { 25U, 67108951 }, { 31U, 67108951 }, { 36U, 67108986 }, { 43U, 167772246 }, { 50U, 167772265 }, { 57U, 721420296 }, { 62U, 67108952 }, { 68U, 721420297 }, { 73U, 67108953 }, { 78U, 67108952 }, { 83U, 67109081 }, { 88U, 33554458 }, { 93U, 67108955 }, { 103U, 67108955 }, { 110U, 721420298 }, { 115U, 33554458 }, { 126U, 67108955 }, { 148U, 167772230 } };
        this.gh_m = new Dictionary<uint, int> { { 2U, 33554460 }, { 7U, 167772268 }, { 12U, 167772339 }, { 22U, 1879048209 }, { 28U, 1879048209 }, { 37U, 167772340 }, { 42U, 16777324 }, { 49U, 167772341 }, { 55U, 167772325 }, { 61U, 167772342 }, { 71U, 16777327 }, { 76U, 167772228 }, { 81U, 167772317 }, { 88U, 167772325 }, { 94U, 167772343 }, { 99U, 167772228 }, { 104U, 167772317 }, { 111U, 167772325 }, { 117U, 167772344 }, { 127U, 16777328 }, { 132U, 167772228 }, { 137U, 167772317 }, { 146U, 167772345 }, { 170U, 167772346 }, { 182U, 167772228 }, { 187U, 167772200 }, { 209U, 167772325 }, { 215U, 167772347 }, { 224U, 167772219 }, { 229U, 167772317 }, { 237U, 167772348 }, { 244U, 167772349 }, { 253U, 167772350 }, { 258U, 167772351 }, { 269U, 167772352 }, { 280U, 167772353 }, { 292U, 167772228 }, { 297U, 167772200 }, { 306U, 167772354 }, { 321U, 167772230 }, { 328U, 167772325 }, { 334U, 167772317 }, { 341U, 167772325 }, { 348U, 167772317 }, { 355U, 167772289 }, { 360U, 167772290 }, { 371U, 167772326 }, { 381U, 167772326 }, { 391U, 167772326 }, { 401U, 167772326 }, { 411U, 167772326 }, { 421U, 167772326 }, { 431U, 167772326 }, { 439U, 167772303 }, { 452U, 167772355 }, { 470U, 16777263 }, { 475U, 1879060560 }, { 480U, 167772356 }, { 485U, 167772357 }, { 513U, 167772228 } };
        this.c = new ObservableCollection<int> { 250, 242, 240, 235, 243, 249, 247, 245, 238, 232, 253, 244, 237, 251, 234, 233, 236, 246, 241, 255, 252 };
    }

    public byte[] cl_b { get; set; }
    public byte[] gs_b { get; set; }
    public byte[] rt_b { get; set; }
    public byte[] wl_b { get; set; }
    public byte[] d_b { get; set; }
    public byte[] pe_b { get; set; }
    public byte[] gh_b { get; set; }
    public Dictionary<uint, int> cl_m { get; set; }
    public Dictionary<uint, int> gs_m { get; set; }
    public Dictionary<uint, int> wl_m { get; set; }
    public Dictionary<uint, int> d_m { get; set; }
    public Dictionary<uint, int> pe_m { get; set; }
    public Dictionary<uint, int> gh_m { get; set; }
    public ObservableCollection<int> c { get; set; }
}

namespace Functions {
    class Deobfuscator
    {
        public Deobfuscator() { }
        public Deobfuscator(string file)
        {
            this.filePath = file;
            this.DeobObj = new FLARE15();
            this.module = ModuleDefinition.FromFile(filePath);
            this.reflected = Assembly.LoadFrom(filePath).Modules.First();
            this.assemblyReflection = Assembly.LoadFrom(filePath);
        }

        public Tuple<string, string> FindTwoArguments(MethodDefinition method, int positionCall)
        {
            int cant = method.CilMethodBody.Instructions.Count();
            int posArg1 = 0, posArg2 = 0, posArg3 = 0;
            int i = cant - 1;
            //Type 1: argument 1
            while (i != 0) {
                var inst = method.CilMethodBody.Instructions[i];
                if (inst.OpCode == CilOpCodes.Ldsfld) {
                    //Console.WriteLine("The first position found is: " + inst.ToString());
                    posArg1 = i;
                    break;
                }
                i--;
            }
            //Type 1: argument 2.
            int j = cant - 1;
            while (j != 0) {
                var inst = method.CilMethodBody.Instructions[j];
                if (inst.OpCode == CilOpCodes.Ldsfld)
                {
                    //Console.WriteLine("The second position found is: " + inst.ToString());
                    if (posArg1 > j && j < cant - 1) {
                        posArg2 = j;
                        break;
                    }
                }
                j--;
            }
            int k = cant - 1;
            while (k != 0)
            {
                var inst = method.CilMethodBody.Instructions[k];
                if (inst.OpCode == CilOpCodes.Newobj)
                {
                    //Console.WriteLine("The second position found is: " + inst.ToString() );
                    if (posArg1 > k && k < cant - 1)
                    {
                        posArg3 = k;
                        break;
                    }
                }
                k--;
            }
            if (posArg1 != 0 && posArg2 != 0 || posArg1 != 0 && posArg3 != 0) {

                if (posArg1 != 0 && posArg2 != 0)
                {
                    var tuple = new Tuple<string, string>(method.CilMethodBody.Instructions[posArg1].ToString(), method.CilMethodBody.Instructions[posArg2].ToString());
                    return tuple;
                } else if (posArg1 != 0 && posArg3 != 0) {
                    var tuple = new Tuple<string, string>(method.CilMethodBody.Instructions[posArg1].ToString(), method.CilMethodBody.Instructions[posArg3].ToString());
                    return tuple;
                }
            }
            return null;
        }

        //Probably return definition to patch.
        public Tuple<MethodDefinition, string, string> FindingAllCallReferences(MethodDefinition method, ref MethodDefinition flaredMethod)
        {
            int FullMethodCount = method.CilMethodBody.Instructions.Count();
            MethodDefinition MethodInst = null;
            int positionCall = 0;
            //First loop retrieves the function that DOES NOT get the call instruction.
            for (int i = 0; i < FullMethodCount; i++)
            {
                var ins = method.CilMethodBody.Instructions[i];
                if (ins.OpCode == CilOpCodes.Call && !((MethodDefinition)ins.Operand).Name.Contains("flared"))
                {
                    //
                    MethodInst = (MethodDefinition)ins.Operand;
                    positionCall = i;
                    break;
                }
            }
            for (int i = 0; i < FullMethodCount; i++)
            {
                var ins = method.CilMethodBody.Instructions[i];
                if (ins.OpCode == CilOpCodes.Call && ((MethodDefinition)ins.Operand).Name.Contains("flared"))
                {
                    flaredMethod = (MethodDefinition)ins.Operand;
                    break;
                }
            }
            if (positionCall == 0 || MethodInst == null) {
                return null;
            }
            Console.WriteLine("Found call as: " + method.CilMethodBody.Instructions[positionCall].ToString());
            Tuple<string, string> args = null;
            if (positionCall < FullMethodCount)
            {
                args = FindTwoArguments(method, positionCall);
            }
            if (args == null)
            {
                return null;
            }
            Tuple<MethodDefinition, string, string> data = new Tuple<MethodDefinition, string, string>(MethodInst, args.Item1, args.Item2);
            return data;
        }

        private MemberInfo resolveMember(string data, ref bool IsDictCase){
            var t = this.DeobObj.GetType().GetMembers();
            MemberInfo mem = null;
            foreach (var type in t)
            {
                if (data.ToString().Contains(type.Name))
                {
                    mem = type;
                    break;
                }
            }
            if (data.ToString().Contains("newobj") && data.ToString().Contains("Dictionary") && data.ToString().Contains(".ctor")){ 
                IsDictCase = true;
            }
            return mem;
        }

        public byte[] decryptionHandler(MethodDefinition methodDef, Tuple<MethodDefinition, string, string> data, MethodDefinition flaredFunction)
        {
            MemberInfo arg1Type = null;
            MemberInfo arg2Type = null;
            byte[] ByteStream = null;
            bool isDictCase = false;
            //flare71 case
            if (data != null)
            {
                arg2Type = resolveMember(data.Item2, ref isDictCase);
                arg1Type = resolveMember(data.Item3, ref isDictCase);
            }
            //flare_70
            else {
                arg1Type = resolveMember("wl_m", ref isDictCase);
                arg2Type = resolveMember("wl_b", ref isDictCase);
            }
            //There could be the case that the dictionary is set.
            if (isDictCase == false){
                Console.WriteLine("Could found the arguments: Dictionary: " + arg1Type.Name + " and raw bytes: " + arg2Type.Name + '\n');
            }
            else {
                Console.WriteLine("Found the dict case, the arguments are " + arg2Type.Name +  " and new Dictionary" + '\n');
            }
            Type DeobjType = this.DeobObj.GetType();
            byte[] arg2 = (byte[])DeobjType.GetProperty(arg2Type.Name).GetValue(this.DeobObj);
            if (isDictCase == true) {
               var emptyDic = new Dictionary<uint, int>();
               ByteStream = DecryptionFunc(flaredFunction, arg2, emptyDic);
               return ByteStream;
            }
            //Type DeobjType = this.DeobObj.GetType();
            Dictionary<uint, int> arg1 = (Dictionary<uint, int>)DeobjType.GetProperty(arg1Type.Name).GetValue(this.DeobObj);
            ByteStream = DecryptionFunc(flaredFunction, arg2, arg1);
            return ByteStream;
        }

        public void printInstructions(MethodDefinition method) {
            var formatter = new CilInstructionFormatter();
            foreach (CilInstruction instruction in method.CilMethodBody.Instructions)
                Console.WriteLine(formatter.FormatInstruction(instruction));
        }
        public int MethodPosition(IList<MethodDefinition> methods, MethodDefinition flared)
        {
            int pos = 0;
            for (int i = 0; i < methods.Count; i++) {
                if (methods[i].Name.Equals(flared.Name)) {
                    pos = i;
                    break;
                }
            }
            return pos;
        }


        public int getLocalVarSigToken(MethodDefinition methodTarget)
        {
            int metadataToken = 0;
            var modules = assemblyReflection.GetModules();
            var module = modules[0];
            bool flagBreak = false;
            foreach (var type in module.GetTypes()){
                if (flagBreak == true) {
                    break;
                }
                foreach (var method in type.GetMethods(BindingFlags.Public | BindingFlags.NonPublic |
                   BindingFlags.Instance | BindingFlags.Static)){
                    //Console.WriteLine("The method to check localvarsigtoken: " + method.Name);
                    if (methodTarget.Name.Contains(method.Name))
                    {
                        MethodBody methodBody = method.GetMethodBody();
                        Console.WriteLine("The method to check localvarsigtoken: " + method.Name);
                        metadataToken = methodBody.LocalSignatureMetadataToken;
                        flagBreak = true;
                        break;
                    }
                }
            }
            return metadataToken;
        }
        
        private void ReadLocalVariables(ref ModuleDefinition module, ref MethodDefinition method)
        {
            int metadataLocalVarSig = getLocalVarSigToken(method);
            var result = method.CilMethodBody;
            if (metadataLocalVarSig != MetadataToken.Zero
                && module.TryLookupMember(metadataLocalVarSig, out var member)
                && member is StandAloneSignature { Signature: LocalVariablesSignature localVariablesSignature })
            {
                var variableTypes = localVariablesSignature.VariableTypes;
                for (int i = 0; i < variableTypes.Count; i++)
                    result.LocalVariables.Add(new CilLocalVariable(variableTypes[i]));
            }
        }

        public void verifyFunctions(ref ModuleDefinition module)
        {
            var types = this.module.TopLevelTypes;
            foreach (var t in types)
            {
                var methodCount = t.Methods.Count();
                for (int i = 0; i < methodCount; i++) 
                {
                    var method = t.Methods[i];  
                    try
                    {
                        int size = method.CilMethodBody.Instructions.Size;
                        method.CilMethodBody.VerifyLabels();
                        if (method.Name.Contains("flared"))
                        {
                            Console.WriteLine("The to test is: " + method.Name);
                        }
                    }
                    catch
                    {
                        Console.WriteLine("Fixing corrupted function: " + method.Name);
                        printInstructions(method);
                        CilMethodBody methodBody = new CilMethodBody(method);
                        method.CilMethodBody = methodBody;
                        continue;
                    }
                    ReadLocalVariables(ref this.module, ref method);
                }
            }
        }

        public void DeobfuscateLayer1()
        {
            var types = this.module.TopLevelTypes;
            foreach (var t in types)
            {
                if (t.Name.Contains("FLARE"))
                {
                    //(var method in t.Methods.ToArray())
                    for(int i = 0; i < t.Methods.Count(); i++)
                    {
                        var method = t.Methods[i];
                        //Verifies that the method body doesnt match either important functions or target CIL functions
                        if (!method.Name.Contains("flare") || method.Name.Contains("flared") ||
                        method.Name == "flare_71" || method.Name == "flare_74") 
                        {
                            continue;
                        }
                        Console.WriteLine("Testing for method: " + method.Name + " in class: " + t.Name);
                        MethodDefinition flaredMethod = null;
                        //Finds call references for specific methods
                        var data = FindingAllCallReferences(method, ref flaredMethod);
                        if (data == null)
                        {
                            Console.WriteLine("Obfuscation type 1: flare70 list used.");
                            Console.WriteLine("The function to patch: " + flaredMethod.Name);
                        }
                        else {
                            Console.WriteLine("Obfuscation type 2: flare71 list used");
                            Console.WriteLine("The function to patch: " + flaredMethod.Name);
                            Console.WriteLine("Arguments are: <" + data.Item2.ToString() + " , " + data.Item3.ToString());
                        }
                        //Find the IL code and the position to the method.
                        byte[] IlCode = decryptionHandler(method, data, flaredMethod);
                        int posFlared = MethodPosition(t.Methods, flaredMethod);

                        //Converts bytestream IL code to MSIL and then WRITE TO MSIL
                        //Zero out the MSIL code from flared (most have decompilation errors)
                        var reader = ByteArrayDataSource.CreateReader(IlCode);
                        try{
                            t.Methods[posFlared].CilMethodBody.VerifyLabels();
                            int size = t.Methods[posFlared].CilMethodBody.Instructions.Size;
                        }
                        catch
                        {
                            Console.WriteLine("Zero out flared method: " + t.Methods[posFlared].Name + ", creating new body\n");
                            CilMethodBody methodBody = new CilMethodBody(t.Methods[posFlared]);
                            t.Methods[posFlared].CilMethodBody = methodBody;
                        }
                        var cilDisassembler = new CilDisassembler(in reader, new PhysicalCilOperandResolver(t.Methods[posFlared].Module, t.Methods[posFlared].CilMethodBody));
                        var instrs = cilDisassembler.ReadInstructions();
                        t.Methods[posFlared].CilMethodBody.ExceptionHandlers.Clear();
                        t.Methods[posFlared].CilMethodBody.Instructions.Clear();
                        t.Methods[posFlared].CilMethodBody.Instructions.AddRange(instrs);
                        t.Methods[posFlared].CilMethodBody.ComputeMaxStackOnBuild = false;
                    }
                }
            }
            Console.WriteLine("Write the module name: " + module.Name);
            verifyFunctions(ref module);
            module.Write(filePath + "_patched.exe");
        }

        public byte[] DecryptionFunc(MethodDefinition flareFunction, byte[] b, Dictionary<uint, int> m)
        {
            foreach (KeyValuePair<uint, int> keyValuePair in m)
            {
                int value = keyValuePair.Value;
                uint key = keyValuePair.Key;
                int tokenFor = 0;
                tokenFor = value;
                b[(int)key] = (byte)tokenFor;
                b[(int)(key + 1U)] = (byte)(tokenFor >> 8);
                b[(int)(key + 2U)] = (byte)(tokenFor >> 16);
                b[(int)(key + 3U)] = (byte)(tokenFor >> 24);
            }
            return b;
        }

        string filePath;
        ModuleDefinition module;
        Module reflected;
        FLARE15 DeobObj;
        Assembly assemblyReflection;
    }
}




namespace Function2
{

    //fix 
    class FLARE06
    {
        // Token: 0x02000019 RID: 25
        public enum DomT
        {
            // Token: 0x04000061 RID: 97
            A,
            // Token: 0x04000062 RID: 98
            B,
            // Token: 0x04000063 RID: 99
            C,
            // Token: 0x04000064 RID: 100
            D,
            // Token: 0x04000065 RID: 101
            E
        }

        // Token: 0x0200001A RID: 26
        public enum DT
        {
            // Token: 0x04000067 RID: 103
            A,
            // Token: 0x04000068 RID: 104
            B,
            // Token: 0x04000069 RID: 105
            C,
            // Token: 0x0400006A RID: 106
            D
        }

        // Token: 0x0200001B RID: 27
        public enum TT
        {
            // Token: 0x0400006C RID: 108
            A = 70,
            // Token: 0x0400006D RID: 109
            B,
            // Token: 0x0400006E RID: 110
            C = 43,
            // Token: 0x0400006F RID: 111
            D = 95,
            // Token: 0x04000070 RID: 112
            E
        }

        // Token: 0x0200001C RID: 28
        public enum SR
        {
            // Token: 0x04000072 RID: 114
            A,
            // Token: 0x04000073 RID: 115
            B,
            // Token: 0x04000074 RID: 116
            C,
            // Token: 0x04000075 RID: 117
            D,
            // Token: 0x04000076 RID: 118
            E
        }

        // Token: 0x0200001D RID: 29
        public enum OT
        {
            // Token: 0x04000078 RID: 120
            A,
            // Token: 0x04000079 RID: 121
            B,
            // Token: 0x0400007A RID: 122
            C,
            // Token: 0x0400007B RID: 123
            D,
            // Token: 0x0400007C RID: 124
            E,
            // Token: 0x0400007D RID: 125
            F,
            // Token: 0x0400007E RID: 126
            G,
            // Token: 0x0400007F RID: 127
            H,
            // Token: 0x04000080 RID: 128
            I
        }
    }
    class FLARE09
    {
        public FLARE09(string f)
        {
            FileStream fileStream = new FileStream(f, FileMode.Open, FileAccess.Read);
            BinaryReader binaryReader = new BinaryReader(fileStream);
            dosHeader = FromBinaryReader<IMAGE_DOS_HEADER>(binaryReader);
            fileStream.Seek((long)((ulong)dosHeader.e_lfanew), SeekOrigin.Begin);
            uint num = binaryReader.ReadUInt32();
            fileHeader = FromBinaryReader<IMAGE_FILE_HEADER>(binaryReader);
            optionalHeader32 = FromBinaryReader<IMAGE_OPTIONAL_HEADER32>(binaryReader);
            imageSectionHeaders = new IMAGE_SECTION_HEADER[(int)fileHeader.NumberOfSections];
            for (int i = 0; i < imageSectionHeaders.Length; i++)
            {
                imageSectionHeaders[i] = FromBinaryReader<IMAGE_SECTION_HEADER>(binaryReader);
            }
        }

        // Token: 0x06000053 RID: 83 RVA: 0x00003C44 File Offset: 0x00001E44
        public static T FromBinaryReader<T>(BinaryReader reader)
        {
            byte[] value = reader.ReadBytes(Marshal.SizeOf(typeof(T)));
            GCHandle gchandle = GCHandle.Alloc(value, GCHandleType.Pinned);
            T result = (T)((object)Marshal.PtrToStructure(gchandle.AddrOfPinnedObject(), typeof(T)));
            gchandle.Free();
            return result;
        }

        public bool Is32BitHeader
        {
            get
            {
                ushort num = 256;
                return (num & this.FileHeader.Characteristics) == num;
            }
        }

        // Token: 0x17000002 RID: 2
        // (get) Token: 0x06000055 RID: 85 RVA: 0x00003CC4 File Offset: 0x00001EC4
        public IMAGE_FILE_HEADER FileHeader
        {
            get
            {
                return fileHeader;
            }
        }

        // Token: 0x17000003 RID: 3
        // (get) Token: 0x06000056 RID: 86 RVA: 0x00003CDC File Offset: 0x00001EDC
        public IMAGE_OPTIONAL_HEADER32 OptionalHeader32
        {
            get
            {
                return optionalHeader32;
            }
        }

        // Token: 0x17000004 RID: 4
        // (get) Token: 0x06000057 RID: 87 RVA: 0x00003CF4 File Offset: 0x00001EF4
        public IMAGE_OPTIONAL_HEADER64 OptionalHeader64
        {
            get
            {
                return optionalHeader64;
            }
        }

        // Token: 0x17000005 RID: 5
        // (get) Token: 0x06000058 RID: 88 RVA: 0x00003D0C File Offset: 0x00001F0C
        public IMAGE_SECTION_HEADER[] ImageSectionHeaders
        {
            get
            {
                return imageSectionHeaders;
            }
        }

        // Token: 0x17000006 RID: 6
        // (get) Token: 0x06000059 RID: 89 RVA: 0x00003D24 File Offset: 0x00001F24
        public DateTime TimeStamp
        {
            get
            {
                DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0);
                dateTime = dateTime.AddSeconds(fileHeader.TimeDateStamp);
                dateTime += TimeZone.CurrentTimeZone.GetUtcOffset(dateTime);
                return dateTime;
            }
        }

        // Token: 0x0400002D RID: 45
        public static IMAGE_DOS_HEADER dosHeader;

        // Token: 0x0400002E RID: 46
        public static IMAGE_FILE_HEADER fileHeader;

        // Token: 0x0400002F RID: 47
        public static IMAGE_OPTIONAL_HEADER32 optionalHeader32;

        // Token: 0x04000030 RID: 48
        public static IMAGE_OPTIONAL_HEADER64 optionalHeader64;

        // Token: 0x04000031 RID: 49
        public static IMAGE_SECTION_HEADER[] imageSectionHeaders;

        // Token: 0x0200001E RID: 30
        public struct IMAGE_DOS_HEADER
        {
            // Token: 0x04000081 RID: 129
            public ushort e_magic;

            // Token: 0x04000082 RID: 130
            public ushort e_cblp;

            // Token: 0x04000083 RID: 131
            public ushort e_cp;

            // Token: 0x04000084 RID: 132
            public ushort e_crlc;

            // Token: 0x04000085 RID: 133
            public ushort e_cparhdr;

            // Token: 0x04000086 RID: 134
            public ushort e_minalloc;

            // Token: 0x04000087 RID: 135
            public ushort e_maxalloc;

            // Token: 0x04000088 RID: 136
            public ushort e_ss;

            // Token: 0x04000089 RID: 137
            public ushort e_sp;

            // Token: 0x0400008A RID: 138
            public ushort e_csum;

            // Token: 0x0400008B RID: 139
            public ushort e_ip;

            // Token: 0x0400008C RID: 140
            public ushort e_cs;

            // Token: 0x0400008D RID: 141
            public ushort e_lfarlc;

            // Token: 0x0400008E RID: 142
            public ushort e_ovno;

            // Token: 0x0400008F RID: 143
            public ushort e_res_0;

            // Token: 0x04000090 RID: 144
            public ushort e_res_1;

            // Token: 0x04000091 RID: 145
            public ushort e_res_2;

            // Token: 0x04000092 RID: 146
            public ushort e_res_3;

            // Token: 0x04000093 RID: 147
            public ushort e_oemid;

            // Token: 0x04000094 RID: 148
            public ushort e_oeminfo;

            // Token: 0x04000095 RID: 149
            public ushort e_res2_0;

            // Token: 0x04000096 RID: 150
            public ushort e_res2_1;

            // Token: 0x04000097 RID: 151
            public ushort e_res2_2;

            // Token: 0x04000098 RID: 152
            public ushort e_res2_3;

            // Token: 0x04000099 RID: 153
            public ushort e_res2_4;

            // Token: 0x0400009A RID: 154
            public ushort e_res2_5;

            // Token: 0x0400009B RID: 155
            public ushort e_res2_6;

            // Token: 0x0400009C RID: 156
            public ushort e_res2_7;

            // Token: 0x0400009D RID: 157
            public ushort e_res2_8;

            // Token: 0x0400009E RID: 158
            public ushort e_res2_9;

            // Token: 0x0400009F RID: 159
            public uint e_lfanew;
        }

        // Token: 0x0200001F RID: 31
        public struct IMAGE_DATA_DIRECTORY
        {
            // Token: 0x040000A0 RID: 160
            public uint VirtualAddress;

            // Token: 0x040000A1 RID: 161
            public uint Size;
        }

        // Token: 0x02000020 RID: 32
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        public struct IMAGE_OPTIONAL_HEADER32
        {
            // Token: 0x040000A2 RID: 162
            public ushort Magic;

            // Token: 0x040000A3 RID: 163
            public byte MajorLinkerVersion;

            // Token: 0x040000A4 RID: 164
            public byte MinorLinkerVersion;

            // Token: 0x040000A5 RID: 165
            public uint SizeOfCode;

            // Token: 0x040000A6 RID: 166
            public uint SizeOfInitializedData;

            // Token: 0x040000A7 RID: 167
            public uint SizeOfUninitializedData;

            // Token: 0x040000A8 RID: 168
            public uint AddressOfEntryPoint;

            // Token: 0x040000A9 RID: 169
            public uint BaseOfCode;

            // Token: 0x040000AA RID: 170
            public uint BaseOfData;

            // Token: 0x040000AB RID: 171
            public uint ImageBase;

            // Token: 0x040000AC RID: 172
            public uint SectionAlignment;

            // Token: 0x040000AD RID: 173
            public uint FileAlignment;

            // Token: 0x040000AE RID: 174
            public ushort MajorOperatingSystemVersion;

            // Token: 0x040000AF RID: 175
            public ushort MinorOperatingSystemVersion;

            // Token: 0x040000B0 RID: 176
            public ushort MajorImageVersion;

            // Token: 0x040000B1 RID: 177
            public ushort MinorImageVersion;

            // Token: 0x040000B2 RID: 178
            public ushort MajorSubsystemVersion;

            // Token: 0x040000B3 RID: 179
            public ushort MinorSubsystemVersion;

            // Token: 0x040000B4 RID: 180
            public uint Win32VersionValue;

            // Token: 0x040000B5 RID: 181
            public uint SizeOfImage;

            // Token: 0x040000B6 RID: 182
            public uint SizeOfHeaders;

            // Token: 0x040000B7 RID: 183
            public uint CheckSum;

            // Token: 0x040000B8 RID: 184
            public ushort Subsystem;

            // Token: 0x040000B9 RID: 185
            public ushort DllCharacteristics;

            // Token: 0x040000BA RID: 186
            public uint SizeOfStackReserve;

            // Token: 0x040000BB RID: 187
            public uint SizeOfStackCommit;

            // Token: 0x040000BC RID: 188
            public uint SizeOfHeapReserve;

            // Token: 0x040000BD RID: 189
            public uint SizeOfHeapCommit;

            // Token: 0x040000BE RID: 190
            public uint LoaderFlags;

            // Token: 0x040000BF RID: 191
            public uint NumberOfRvaAndSizes;

            // Token: 0x040000C0 RID: 192
            public IMAGE_DATA_DIRECTORY ExportTable;

            // Token: 0x040000C1 RID: 193
            public IMAGE_DATA_DIRECTORY ImportTable;

            // Token: 0x040000C2 RID: 194
            public IMAGE_DATA_DIRECTORY ResourceTable;

            // Token: 0x040000C3 RID: 195
            public IMAGE_DATA_DIRECTORY ExceptionTable;

            // Token: 0x040000C4 RID: 196
            public IMAGE_DATA_DIRECTORY CertificateTable;

            // Token: 0x040000C5 RID: 197
            public IMAGE_DATA_DIRECTORY BaseRelocationTable;

            // Token: 0x040000C6 RID: 198
            public IMAGE_DATA_DIRECTORY Debug;

            // Token: 0x040000C7 RID: 199
            public IMAGE_DATA_DIRECTORY Architecture;

            // Token: 0x040000C8 RID: 200
            public IMAGE_DATA_DIRECTORY GlobalPtr;

            // Token: 0x040000C9 RID: 201
            public IMAGE_DATA_DIRECTORY TLSTable;

            // Token: 0x040000CA RID: 202
            public IMAGE_DATA_DIRECTORY LoadConfigTable;

            // Token: 0x040000CB RID: 203
            public IMAGE_DATA_DIRECTORY BoundImport;

            // Token: 0x040000CC RID: 204
            public IMAGE_DATA_DIRECTORY IAT;

            // Token: 0x040000CD RID: 205
            public IMAGE_DATA_DIRECTORY DelayImportDescriptor;

            // Token: 0x040000CE RID: 206
            public IMAGE_DATA_DIRECTORY CLRRuntimeHeader;

            // Token: 0x040000CF RID: 207
            public IMAGE_DATA_DIRECTORY Reserved;
        }

        // Token: 0x02000021 RID: 33
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        public struct IMAGE_OPTIONAL_HEADER64
        {
            // Token: 0x040000D0 RID: 208
            public ushort Magic;

            // Token: 0x040000D1 RID: 209
            public byte MajorLinkerVersion;

            // Token: 0x040000D2 RID: 210
            public byte MinorLinkerVersion;

            // Token: 0x040000D3 RID: 211
            public uint SizeOfCode;

            // Token: 0x040000D4 RID: 212
            public uint SizeOfInitializedData;

            // Token: 0x040000D5 RID: 213
            public uint SizeOfUninitializedData;

            // Token: 0x040000D6 RID: 214
            public uint AddressOfEntryPoint;

            // Token: 0x040000D7 RID: 215
            public uint BaseOfCode;

            // Token: 0x040000D8 RID: 216
            public ulong ImageBase;

            // Token: 0x040000D9 RID: 217
            public uint SectionAlignment;

            // Token: 0x040000DA RID: 218
            public uint FileAlignment;

            // Token: 0x040000DB RID: 219
            public ushort MajorOperatingSystemVersion;

            // Token: 0x040000DC RID: 220
            public ushort MinorOperatingSystemVersion;

            // Token: 0x040000DD RID: 221
            public ushort MajorImageVersion;

            // Token: 0x040000DE RID: 222
            public ushort MinorImageVersion;

            // Token: 0x040000DF RID: 223
            public ushort MajorSubsystemVersion;

            // Token: 0x040000E0 RID: 224
            public ushort MinorSubsystemVersion;

            // Token: 0x040000E1 RID: 225
            public uint Win32VersionValue;

            // Token: 0x040000E2 RID: 226
            public uint SizeOfImage;

            // Token: 0x040000E3 RID: 227
            public uint SizeOfHeaders;

            // Token: 0x040000E4 RID: 228
            public uint CheckSum;

            // Token: 0x040000E5 RID: 229
            public ushort Subsystem;

            // Token: 0x040000E6 RID: 230
            public ushort DllCharacteristics;

            // Token: 0x040000E7 RID: 231
            public ulong SizeOfStackReserve;

            // Token: 0x040000E8 RID: 232
            public ulong SizeOfStackCommit;

            // Token: 0x040000E9 RID: 233
            public ulong SizeOfHeapReserve;

            // Token: 0x040000EA RID: 234
            public ulong SizeOfHeapCommit;

            // Token: 0x040000EB RID: 235
            public uint LoaderFlags;

            // Token: 0x040000EC RID: 236
            public uint NumberOfRvaAndSizes;

            // Token: 0x040000ED RID: 237
            public IMAGE_DATA_DIRECTORY ExportTable;

            // Token: 0x040000EE RID: 238
            public IMAGE_DATA_DIRECTORY ImportTable;

            // Token: 0x040000EF RID: 239
            public IMAGE_DATA_DIRECTORY ResourceTable;

            // Token: 0x040000F0 RID: 240
            public IMAGE_DATA_DIRECTORY ExceptionTable;

            // Token: 0x040000F1 RID: 241
            public IMAGE_DATA_DIRECTORY CertificateTable;

            // Token: 0x040000F2 RID: 242
            public IMAGE_DATA_DIRECTORY BaseRelocationTable;

            // Token: 0x040000F3 RID: 243
            public IMAGE_DATA_DIRECTORY Debug;

            // Token: 0x040000F4 RID: 244
            public IMAGE_DATA_DIRECTORY Architecture;

            // Token: 0x040000F5 RID: 245
            public IMAGE_DATA_DIRECTORY GlobalPtr;

            // Token: 0x040000F6 RID: 246
            public IMAGE_DATA_DIRECTORY TLSTable;

            // Token: 0x040000F7 RID: 247
            public IMAGE_DATA_DIRECTORY LoadConfigTable;

            // Token: 0x040000F8 RID: 248
            public IMAGE_DATA_DIRECTORY BoundImport;

            // Token: 0x040000F9 RID: 249
            public IMAGE_DATA_DIRECTORY IAT;

            // Token: 0x040000FA RID: 250
            public IMAGE_DATA_DIRECTORY DelayImportDescriptor;

            // Token: 0x040000FB RID: 251
            public IMAGE_DATA_DIRECTORY CLRRuntimeHeader;

            // Token: 0x040000FC RID: 252
            public IMAGE_DATA_DIRECTORY Reserved;
        }

        // Token: 0x02000022 RID: 34
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        public struct IMAGE_FILE_HEADER
        {
            // Token: 0x040000FD RID: 253
            public ushort Machine;

            // Token: 0x040000FE RID: 254
            public ushort NumberOfSections;

            // Token: 0x040000FF RID: 255
            public uint TimeDateStamp;

            // Token: 0x04000100 RID: 256
            public uint PointerToSymbolTable;

            // Token: 0x04000101 RID: 257
            public uint NumberOfSymbols;

            // Token: 0x04000102 RID: 258
            public ushort SizeOfOptionalHeader;

            // Token: 0x04000103 RID: 259
            public ushort Characteristics;
        }

        // Token: 0x02000023 RID: 35
        [StructLayout(LayoutKind.Explicit)]
        public struct IMAGE_SECTION_HEADER
        {
            public string Section
            {
                get
                {
                    return new string(this.Name);
                }
            }

            // Token: 0x04000104 RID: 260
            [FieldOffset(0)]
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 8)]
            public char[] Name;

            // Token: 0x04000105 RID: 261
            [FieldOffset(8)]
            public uint VirtualSize;

            // Token: 0x04000106 RID: 262
            [FieldOffset(12)]
            public uint VirtualAddress;

            // Token: 0x04000107 RID: 263
            [FieldOffset(16)]
            public uint SizeOfRawData;

            // Token: 0x04000108 RID: 264
            [FieldOffset(20)]
            public uint PointerToRawData;

            // Token: 0x04000109 RID: 265
            [FieldOffset(24)]
            public uint PointerToRelocations;

            // Token: 0x0400010A RID: 266
            [FieldOffset(28)]
            public uint PointerToLinenumbers;

            // Token: 0x0400010B RID: 267
            [FieldOffset(32)]
            public ushort NumberOfRelocations;

            // Token: 0x0400010C RID: 268
            [FieldOffset(34)]
            public ushort NumberOfLinenumbers;

            // Token: 0x0400010D RID: 269
            [FieldOffset(36)]
            public DataSectionFlags Characteristics;
        }

        // Token: 0x02000024 RID: 36
        [Flags]
        public enum DataSectionFlags : uint
        {
            // Token: 0x0400010F RID: 271
            TypeReg = 0U,
            // Token: 0x04000110 RID: 272
            TypeDsect = 1U,
            // Token: 0x04000111 RID: 273
            TypeNoLoad = 2U,
            // Token: 0x04000112 RID: 274
            TypeGroup = 4U,
            // Token: 0x04000113 RID: 275
            TypeNoPadded = 8U,
            // Token: 0x04000114 RID: 276
            TypeCopy = 16U,
            // Token: 0x04000115 RID: 277
            ContentCode = 32U,
            // Token: 0x04000116 RID: 278
            ContentInitializedData = 64U,
            // Token: 0x04000117 RID: 279
            ContentUninitializedData = 128U,
            // Token: 0x04000118 RID: 280
            LinkOther = 256U,
            // Token: 0x04000119 RID: 281
            LinkInfo = 512U,
            // Token: 0x0400011A RID: 282
            TypeOver = 1024U,
            // Token: 0x0400011B RID: 283
            LinkRemove = 2048U,
            // Token: 0x0400011C RID: 284
            LinkComDat = 4096U,
            // Token: 0x0400011D RID: 285
            NoDeferSpecExceptions = 16384U,
            // Token: 0x0400011E RID: 286
            RelativeGP = 32768U,
            // Token: 0x0400011F RID: 287
            MemPurgeable = 131072U,
            // Token: 0x04000120 RID: 288
            Memory16Bit = 131072U,
            // Token: 0x04000121 RID: 289
            MemoryLocked = 262144U,
            // Token: 0x04000122 RID: 290
            MemoryPreload = 524288U,
            // Token: 0x04000123 RID: 291
            Align1Bytes = 1048576U,
            // Token: 0x04000124 RID: 292
            Align2Bytes = 2097152U,
            // Token: 0x04000125 RID: 293
            Align4Bytes = 3145728U,
            // Token: 0x04000126 RID: 294
            Align8Bytes = 4194304U,
            // Token: 0x04000127 RID: 295
            Align16Bytes = 5242880U,
            // Token: 0x04000128 RID: 296
            Align32Bytes = 6291456U,
            // Token: 0x04000129 RID: 297
            Align64Bytes = 7340032U,
            // Token: 0x0400012A RID: 298
            Align128Bytes = 8388608U,
            // Token: 0x0400012B RID: 299
            Align256Bytes = 9437184U,
            // Token: 0x0400012C RID: 300
            Align512Bytes = 10485760U,
            // Token: 0x0400012D RID: 301
            Align1024Bytes = 11534336U,
            // Token: 0x0400012E RID: 302
            Align2048Bytes = 12582912U,
            // Token: 0x0400012F RID: 303
            Align4096Bytes = 13631488U,
            // Token: 0x04000130 RID: 304
            Align8192Bytes = 14680064U,
            // Token: 0x04000131 RID: 305
            LinkExtendedRelocationOverflow = 16777216U,
            // Token: 0x04000132 RID: 306
            MemoryDiscardable = 33554432U,
            // Token: 0x04000133 RID: 307
            MemoryNotCached = 67108864U,
            MemoryNotPaged = 134217728U,
            MemoryShared = 268435456U,
            MemoryExecute = 536870912U,
            MemoryRead = 1073741824U,
            MemoryWrite = 2147483648U
        }

    }

    //You want to patch all the methods that HAVE NOT BE 
    class Deobfuscator2
    {

        public Deobfuscator2(string filePatched, string fileNotPatched)
        {
            this.filePath = filePatched;
            this.moduleNotPatched = ModuleDefinition.FromFile(fileNotPatched);
            this.reflectedNotPatched = Assembly.LoadFrom(fileNotPatched).Modules.First();
            //this.reflectedPatched = Assembly.LoadFrom(filePatched).Modules.First();
            this.asmNotPatched = Assembly.LoadFrom(fileNotPatched);
            this.ModulePatched = ModuleDefinition.FromFile(filePatched);
            this.functionsToPatch = new List<string>();
            this.functionsPatchFlare71 = new List<string>();
            this.DeobObjNormal = new FLARE15();
        }
        public string MetadataEncoderToString(int t)
        {
            string text = "";
            string text2 = "";
            MethodInfo methodInfo = null;
            methodInfo = (MethodInfo)reflectedNotPatched.ResolveMethod(t);
            MethodBody methodBody = methodInfo.GetMethodBody();
            byte[] bytes = Encoding.ASCII.GetBytes(methodInfo.Attributes.ToString());
            byte[] bytes2 = Encoding.ASCII.GetBytes(methodInfo.ReturnType.ToString());
            byte[] bytes3 = Encoding.ASCII.GetBytes(methodInfo.CallingConvention.ToString());
            foreach (ParameterInfo parameterInfo in methodInfo.GetParameters())
            {
                string str = text2;
                Type parameterType = parameterInfo.ParameterType;
                text2 = str + ((parameterType != null) ? parameterType.ToString() : null);
            }
            byte[] bytes4 = Encoding.ASCII.GetBytes(methodBody.MaxStackSize.ToString());
            byte[] bytes5 = BitConverter.GetBytes(methodBody.GetILAsByteArray().Length);
            foreach (LocalVariableInfo localVariableInfo in methodBody.LocalVariables)
            {
                string str2 = text;
                Type localType = localVariableInfo.LocalType;
                text = str2 + ((localType != null) ? localType.ToString() : null);
            }
            byte[] bytes6 = Encoding.ASCII.GetBytes(text);
            byte[] bytes7 = Encoding.ASCII.GetBytes(text2);
            IncrementalHash incrementalHash = IncrementalHash.CreateHash(HashAlgorithmName.SHA256);
            incrementalHash.AppendData(bytes5);
            incrementalHash.AppendData(bytes);
            incrementalHash.AppendData(bytes2);
            incrementalHash.AppendData(bytes4);
            incrementalHash.AppendData(bytes6);
            incrementalHash.AppendData(bytes7);
            incrementalHash.AppendData(bytes3);
            byte[] hashAndReset = incrementalHash.GetHashAndReset();
            StringBuilder stringBuilder = new StringBuilder(hashAndReset.Length * 2);
            for (int j = 0; j < hashAndReset.Length; j++)
            {
                stringBuilder.Append(hashAndReset[j].ToString("x2"));
            }
            return stringBuilder.ToString();
        }


        public MethodDefinition getFunctionFromModule(string nameFunc)
        {
            MethodDefinition EmuFunction = null;
            var types = this.moduleNotPatched.TopLevelTypes;
            foreach (var t in types)
            {
                for (int i = 0; i < t.Methods.Count(); i++)
                {
                    var method = t.Methods[i];
                    if (method.Name.Equals(nameFunc))
                    {
                        EmuFunction = method;
                        break;
                    }
                }
            }
            return EmuFunction;
        }

        //Does not match
        public byte[] GetSectionHeaderToGetPayload(string h)
        {
            string location = asmNotPatched.Location;
            this.DeobObj = new FLARE09(location);
            byte[] array = null;
            FileStream fileStream = new FileStream(location, FileMode.Open, FileAccess.Read);
            foreach (FLARE09.IMAGE_SECTION_HEADER image_SECTION_HEADER in this.DeobObj.ImageSectionHeaders)
            {
                bool flag = h.StartsWith(new string(image_SECTION_HEADER.Name));
                if (flag)
                {
                    array = new byte[image_SECTION_HEADER.VirtualSize];
                    fileStream.Seek((long)((ulong)image_SECTION_HEADER.PointerToRawData), SeekOrigin.Begin);
                    fileStream.Read(array, 0, (int)image_SECTION_HEADER.VirtualSize);
                    break;
                }
            }
            return array;
        }

        public byte[] generateILOutput(byte[] b, int tk)
        {
            Dictionary<uint, OT> dictionary = new Dictionary<uint, OT>
            {
                {
                    88U,
                     OT.A
                },
                {
                    214U,
                     OT.A
                },
                {
                    215U,
                     OT.A
                },
                {
                    95U,
                     OT.A
                },
                {
                    65024U,
                     OT.A
                },
                {
                    59U,
                     OT.D
                },
                {
                    46U,
                     OT.C
                },
                {
                    60U,
                     OT.D
                },
                {
                    47U,
                     OT.C
                },
                {
                    65U,
                     OT.D
                },
                {
                    52U,
                     OT.C
                },
                {
                    61U,
                     OT.D
                },
                {
                    48U,
                     OT.C
                },
                {
                    66U,
                     OT.D
                },
                {
                    53U,
                     OT.C
                },
                {
                    62U,
                     OT.D
                },
                {
                    49U,
                     OT.C
                },
                {
                    67U,
                     OT.D
                },
                {
                    54U,
                     OT.C
                },
                {
                    63U,
                     OT.D
                },
                {
                    50U,
                     OT.C
                },
                {
                    68U,
                     OT.D
                },
                {
                    55U,
                     OT.C
                },
                {
                    64U,
                     OT.D
                },
                {
                    51U,
                     OT.C
                },
                {
                    140U,
                     OT.B
                },
                {
                    56U,
                     OT.D
                },
                {
                    43U,
                     OT.C
                },
                {
                    1U,
                     OT.A
                },
                {
                    57U,
                     OT.D
                },
                {
                    44U,
                     OT.C
                },
                {
                    58U,
                     OT.D
                },
                {
                    45U,
                     OT.C
                },
                {
                    40U,
                     OT.B
                },
                {
                    41U,
                     OT.B
                },
                {
                    111U,
                     OT.B
                },
                {
                    116U,
                     OT.B
                },
                {
                    65025U,
                     OT.A
                },
                {
                    65026U,
                     OT.A
                },
                {
                    65027U,
                     OT.A
                },
                {
                    195U,
                     OT.A
                },
                {
                    65028U,
                     OT.A
                },
                {
                    65029U,
                     OT.A
                },
                {
                    65046U,
                     OT.B
                },
                {
                    211U,
                     OT.A
                },
                {
                    103U,
                     OT.A
                },
                {
                    104U,
                     OT.A
                },
                {
                    105U,
                     OT.A
                },
                {
                    106U,
                     OT.A
                },
                {
                    212U,
                     OT.A
                },
                {
                    138U,
                     OT.A
                },
                {
                    179U,
                     OT.A
                },
                {
                    130U,
                     OT.A
                },
                {
                    181U,
                     OT.A
                },
                {
                    131U,
                     OT.A
                },
                {
                    183U,
                     OT.A
                },
                {
                    132U,
                     OT.A
                },
                {
                    185U,
                     OT.A
                },
                {
                    133U,
                     OT.A
                },
                {
                    213U,
                     OT.A
                },
                {
                    139U,
                     OT.A
                },
                {
                    180U,
                     OT.A
                },
                {
                    134U,
                     OT.A
                },
                {
                    182U,
                     OT.A
                },
                {
                    135U,
                     OT.A
                },
                {
                    184U,
                     OT.A
                },
                {
                    136U,
                     OT.A
                },
                {
                    186U,
                     OT.A
                },
                {
                    137U,
                     OT.A
                },
                {
                    118U,
                     OT.A
                },
                {
                    107U,
                     OT.A
                },
                {
                    108U,
                     OT.A
                },
                {
                    224U,
                     OT.A
                },
                {
                    210U,
                     OT.A
                },
                {
                    209U,
                     OT.A
                },
                {
                    109U,
                     OT.A
                },
                {
                    110U,
                     OT.A
                },
                {
                    65047U,
                     OT.A
                },
                {
                    112U,
                     OT.B
                },
                {
                    91U,
                     OT.A
                },
                {
                    92U,
                     OT.A
                },
                {
                    37U,
                     OT.A
                },
                {
                    65041U,
                     OT.A
                },
                {
                    220U,
                     OT.A
                },
                {
                    65048U,
                     OT.A
                },
                {
                    65045U,
                     OT.B
                },
                {
                    117U,
                     OT.B
                },
                {
                    39U,
                     OT.B
                },
                {
                    65033U,
                     OT.F
                },
                {
                    2U,
                     OT.A
                },
                {
                    3U,
                     OT.A
                },
                {
                    4U,
                     OT.A
                },
                {
                    5U,
                     OT.A
                },
                {
                    14U,
                     OT.E
                },
                {
                    65034U,
                     OT.F
                },
                {
                    15U,
                     OT.E
                },
                {
                    32U,
                     OT.G
                },
                {
                    22U,
                     OT.A
                },
                {
                    23U,
                     OT.A
                },
                {
                    24U,
                     OT.A
                },
                {
                    25U,
                     OT.A
                },
                {
                    26U,
                     OT.A
                },
                {
                    27U,
                     OT.A
                },
                {
                    28U,
                     OT.A
                },
                {
                    29U,
                     OT.A
                },
                {
                    30U,
                     OT.A
                },
                {
                    21U,
                     OT.A
                },
                {
                    31U,
                     OT.E
                },
                {
                    33U,
                     OT.H
                },
                {
                    34U,
                     OT.G
                },
                {
                    35U,
                     OT.H
                },
                {
                    163U,
                     OT.B
                },
                {
                    151U,
                     OT.A
                },
                {
                    144U,
                     OT.A
                },
                {
                    146U,
                     OT.A
                },
                {
                    148U,
                     OT.A
                },
                {
                    150U,
                     OT.A
                },
                {
                    152U,
                     OT.A
                },
                {
                    153U,
                     OT.A
                },
                {
                    154U,
                     OT.A
                },
                {
                    145U,
                     OT.A
                },
                {
                    147U,
                     OT.A
                },
                {
                    149U,
                     OT.A
                },
                {
                    143U,
                     OT.B
                },
                {
                    123U,
                     OT.B
                },
                {
                    124U,
                     OT.B
                },
                {
                    65030U,
                     OT.B
                },
                {
                    77U,
                     OT.A
                },
                {
                    70U,
                     OT.A
                },
                {
                    72U,
                     OT.A
                },
                {
                    74U,
                     OT.A
                },
                {
                    76U,
                     OT.A
                },
                {
                    78U,
                     OT.A
                },
                {
                    79U,
                     OT.A
                },
                {
                    80U,
                     OT.A
                },
                {
                    71U,
                     OT.A
                },
                {
                    73U,
                     OT.A
                },
                {
                    75U,
                     OT.A
                },
                {
                    142U,
                     OT.A
                },
                {
                    65036U,
                     OT.F
                },
                {
                    6U,
                     OT.A
                },
                {
                    7U,
                     OT.A
                },
                {
                    8U,
                     OT.A
                },
                {
                    9U,
                     OT.A
                },
                {
                    17U,
                     OT.E
                },
                {
                    65037U,
                     OT.F
                },
                {
                    18U,
                     OT.E
                },
                {
                    20U,
                     OT.A
                },
                {
                    113U,
                     OT.B
                },
                {
                    126U,
                     OT.B
                },
                {
                    127U,
                     OT.B
                },
                {
                    114U,
                     OT.B
                },
                {
                    208U,
                     OT.B
                },
                {
                    65031U,
                     OT.B
                },
                {
                    221U,
                     OT.D
                },
                {
                    222U,
                     OT.C
                },
                {
                    65039U,
                     OT.A
                },
                {
                    198U,
                     OT.B
                },
                {
                    90U,
                     OT.A
                },
                {
                    216U,
                     OT.A
                },
                {
                    217U,
                     OT.A
                },
                {
                    101U,
                     OT.A
                },
                {
                    141U,
                     OT.B
                },
                {
                    115U,
                     OT.B
                },
                {
                    65049U,
                     OT.E
                },
                {
                    0U,
                     OT.A
                },
                {
                    102U,
                     OT.A
                },
                {
                    96U,
                     OT.A
                },
                {
                    38U,
                     OT.A
                },
                {
                    254U,
                     OT.A
                },
                {
                    253U,
                     OT.A
                },
                {
                    252U,
                     OT.A
                },
                {
                    251U,
                     OT.A
                },
                {
                    250U,
                     OT.A
                },
                {
                    249U,
                     OT.A
                },
                {
                    248U,
                     OT.A
                },
                {
                    255U,
                     OT.A
                },
                {
                    65054U,
                     OT.A
                },
                {
                    65053U,
                     OT.A
                },
                {
                    194U,
                     OT.B
                },
                {
                    93U,
                     OT.A
                },
                {
                    94U,
                     OT.A
                },
                {
                    42U,
                     OT.A
                },
                {
                    65050U,
                     OT.A
                },
                {
                    98U,
                     OT.A
                },
                {
                    99U,
                     OT.A
                },
                {
                    100U,
                     OT.A
                },
                {
                    65052U,
                     OT.B
                },
                {
                    65035U,
                     OT.F
                },
                {
                    16U,
                     OT.E
                },
                {
                    164U,
                     OT.B
                },
                {
                    155U,
                     OT.A
                },
                {
                    156U,
                     OT.A
                },
                {
                    157U,
                     OT.A
                },
                {
                    158U,
                     OT.A
                },
                {
                    159U,
                     OT.A
                },
                {
                    160U,
                     OT.A
                },
                {
                    161U,
                     OT.A
                },
                {
                    162U,
                     OT.A
                },
                {
                    125U,
                     OT.B
                },
                {
                    223U,
                     OT.A
                },
                {
                    82U,
                     OT.A
                },
                {
                    83U,
                     OT.A
                },
                {
                    84U,
                     OT.A
                },
                {
                    85U,
                     OT.A
                },
                {
                    86U,
                     OT.A
                },
                {
                    87U,
                     OT.A
                },
                {
                    81U,
                     OT.A
                },
                {
                    65038U,
                     OT.F
                },
                {
                    10U,
                     OT.A
                },
                {
                    11U,
                     OT.A
                },
                {
                    12U,
                     OT.A
                },
                {
                    13U,
                     OT.A
                },
                {
                    19U,
                     OT.E
                },
                {
                    129U,
                     OT.B
                },
                {
                    128U,
                     OT.B
                },
                {
                    89U,
                     OT.A
                },
                {
                    218U,
                     OT.A
                },
                {
                    219U,
                     OT.A
                },
                {
                    69U,
                     OT.I
                },
                {
                    65044U,
                     OT.A
                },
                {
                    122U,
                     OT.A
                },
                {
                    65042U,
                     OT.E
                },
                {
                    121U,
                     OT.B
                },
                {
                    165U,
                     OT.B
                },
                {
                    65043U,
                     OT.A
                },
                {
                    97U,
                     OT.A
                }
            };
            int j = 0;
            while (j < b.Length)
            {
                bool flag = b[j] == 254;
                uint key;
                if (flag)
                {
                    key = 65024U + (uint)b[j + 1];
                    j++;
                }
                else
                {
                    key = (uint)b[j];
                }
                OT ot = dictionary[key];
                j++;
                switch (ot)
                {
                    case OT.B:
                        {
                            uint num = (uint)encoderFunction(b, j);
                            num ^= 2727913149U;
                            int tokenFor = (int)num;
                            b[j] = (byte)tokenFor;
                            b[j + 1] = (byte)(tokenFor >> 8);
                            b[j + 2] = (byte)(tokenFor >> 16);
                            b[j + 3] = (byte)(tokenFor >> 24);
                            j += 4;
                            break;
                        }
                    case OT.C:
                    case OT.E:
                        j++;
                        break;
                    case OT.D:
                    case OT.G:
                        j += 4;
                        break;
                    case OT.F:
                        j += 2;
                        break;
                    case OT.H:
                        j += 8;
                        break;
                    case OT.I:
                        j += 4 + encoderFunction(b, j) * 4;
                        break;
                }
            }
            return b;
        }

        public byte[] Rc4Decryption(byte[] p, byte[] d)
        {
            int[] array = new int[256];
            int[] array2 = new int[256];
            byte[] array3 = new byte[d.Length];
            int i;
            for (i = 0; i < 256; i++)
            {
                array[i] = (int)p[i % p.Length];
                array2[i] = i;
            }
            int num;
            for (i = (num = 0); i < 256; i++)
            {
                num = (num + array2[i] + array[i]) % 256;
                int num2 = array2[i];
                array2[i] = array2[num];
                array2[num] = num2;
            }
            int num3;
            num = (num3 = (i = 0));
            while (i < d.Length)
            {
                num3++;
                num3 %= 256;
                num += array2[num3];
                num %= 256;
                int num2 = array2[num3];
                array2[num3] = array2[num];
                array2[num] = num2;
                int num4 = array2[(array2[num3] + array2[num]) % 256];
                array3[i] = (byte)((int)d[i] ^ num4);
                i++;
            }
            return array3;
        }
        public int encoderFunction(byte[] b, int o)
        {
            int num = (int)b[o + 3] * 16777216;
            num += (int)b[o + 2] * 65536;
            num += (int)b[o + 1] * 256;
            return num + (int)b[o];
        }

        public void PatchFunction(MethodDefinition method)
        {
            var types = this.moduleNotPatched.TopLevelTypes;
            bool loopEnd = false;
            foreach (var type in types)
            {
                if (loopEnd == true)
                {
                    break;
                }
                int countMethods = type.Methods.Count();
                for (int i = 0; i < countMethods; i++)
                {
                    if (method.MetadataToken == type.Methods[i].MetadataToken || method.Name.Contains(type.Methods[i].Name))
                    {
                        type.Methods[i].CilMethodBody = method.CilMethodBody;
                        loopEnd = true;
                        break;
                    }
                }
            }
        }

        public int getLocalVarSigToken(MethodDefinition methodTarget)
        {
            int metadataToken = 0;
            var modules = asmNotPatched.GetModules();
            var module = modules[0];
            bool flagBreak = false;
            foreach (var type in module.GetTypes())
            {
                if (flagBreak == true)
                {
                    break;
                }
                foreach (var method in type.GetMethods(BindingFlags.Public | BindingFlags.NonPublic |
                   BindingFlags.Instance | BindingFlags.Static))
                {
                    //Console.WriteLine("The method to check localvarsigtoken: " + method.Name);
                    if (methodTarget.Name.Contains(method.Name))
                    {
                        MethodBody methodBody = method.GetMethodBody();
                        //Console.WriteLine("The method to check localvarsigtoken: " + method.Name);
                        metadataToken = methodBody.LocalSignatureMetadataToken;
                        flagBreak = true;
                        break;
                    }
                }
            }
            return metadataToken;
        }

        private void ReadLocalVariables(ref ModuleDefinition module, ref MethodDefinition method)
        {
            int metadataLocalVarSig = getLocalVarSigToken(method);
            var result = method.CilMethodBody;
            if (metadataLocalVarSig != MetadataToken.Zero
                && module.TryLookupMember(metadataLocalVarSig, out var member)
                && member is StandAloneSignature { Signature: LocalVariablesSignature localVariablesSignature })
            {
                var variableTypes = localVariablesSignature.VariableTypes;
                for (int i = 0; i < variableTypes.Count; i++)
                    result.LocalVariables.Add(new CilLocalVariable(variableTypes[i]));
            }
        }

        public void verifyFunctions()
        {
            var types = this.moduleNotPatched.TopLevelTypes;
            foreach (var t in types)
            {
                var methodCount = t.Methods.Count();
                for (int i = 0; i < methodCount; i++)
                {
                    var method = t.Methods[i];
                    try
                    {
                        int size = method.CilMethodBody.Instructions.Size;
                        method.CilMethodBody.VerifyLabels();
                    }
                    catch
                    {
                        Console.WriteLine("Fixing corrupted function: " + method.Name);
                        CilMethodBody methodBody = new CilMethodBody(method);
                        method.CilMethodBody = methodBody;
                        continue;
                    }
                    ReadLocalVariables(ref this.moduleNotPatched, ref method);
                }
            }
        }

        //Return tuple of both methods that are called, make sure that they match the pattern expected.
        //Wont work because you need previous knowledge of the first layer decryption, MERGE is required.
        
        public Tuple<MethodDefinition, MethodDefinition> findingCallReferences(MethodDefinition method) {
            int FullMethodCount = method.CilMethodBody.Instructions.Count();
            MethodDefinition MethodInst = null, flaredMethod = null;
            int positionCall = 0, positionFlared = 0;
            Tuple<MethodDefinition, MethodDefinition> functions = null;

            for (int i = 0; i < FullMethodCount; i++)
            {
                var ins = method.CilMethodBody.Instructions[i];
                if (ins.OpCode == CilOpCodes.Call && !((MethodDefinition)ins.Operand).Name.Contains("flared"))
                {

                    MethodInst = (MethodDefinition)ins.Operand;
                    positionCall = i;
                    break;
                }
            }
            for (int i = 0; i < FullMethodCount; i++)
            {
                var ins = method.CilMethodBody.Instructions[i];
                if (ins.OpCode == CilOpCodes.Call && ((MethodDefinition)ins.Operand).Name.Contains("flared"))
                {
                    flaredMethod = (MethodDefinition)ins.Operand;
                    positionFlared = i;
                    break;
                }
            }
            functions = new Tuple<MethodDefinition, MethodDefinition>(MethodInst, flaredMethod);
            return functions;
            
        }
        public int FindMetadaTokenNotPatched(MethodDefinition method) {
            var types = this.moduleNotPatched.TopLevelTypes;
            int metadataToken = 0;
            bool breakLoop = false;
            foreach (var t in types) {
                if (breakLoop == true) {
                    break;
                }
                foreach (var meth in t.Methods) {
                    if (meth.Name.Contains(method.Name)) {
                        metadataToken = meth.MetadataToken.ToInt32();
                        breakLoop = true;
                        break;
                    }
                }
            }
            return metadataToken;
        }

        public bool checkForMethodFlare70(MethodDefinition method){
            bool CanBePatched = false;
            int FullMethodCount = method.CilMethodBody.Instructions.Count();
            for (int i = 0; i < FullMethodCount; i++)
            {
                var ins = method.CilMethodBody.Instructions[i];
                if (ins.OpCode == CilOpCodes.Call && ((MethodDefinition)ins.Operand).Name.Contains("flare_70"))
                {
                    CanBePatched = true;
                    break;
                }
            }
            return CanBePatched;
        }

        public void GenearateListToPatchFromPatchedModule()
        {
            var types = this.ModulePatched.TopLevelTypes;
            foreach (var t in types){
                foreach (var method in t.Methods) {  
                    if (method.Name.Contains("flare") && !method.Name.Contains("flared") && !method.Name.Contains("flare_74") && !method.Name.Contains("flare_70") && !method.Name.Contains("flare_71"))
                    { 
                        bool isPatchable  = checkForMethodFlare70(method);
                        if (isPatchable == true) {
                            Console.WriteLine("Found patchable function: " + method.Name);
                            functionsToPatch.Add(method.Name);
                        }
                    }
                }
            }
        }

        public bool checkForMethodFlare71(MethodDefinition method)
        {
            bool CanBePatched = false;
            int FullMethodCount = method.CilMethodBody.Instructions.Count();
            for (int i = 0; i < FullMethodCount; i++)
            {
                var ins = method.CilMethodBody.Instructions[i];
                if (ins.OpCode == CilOpCodes.Call && ((MethodDefinition)ins.Operand).Name.Contains("flare_71"))
                {
                    CanBePatched = true;
                    break;
                }
            }
            return CanBePatched;
        }

        public void GenearateListToPatchFLARE71()
        {
            var types = this.moduleNotPatched.TopLevelTypes;
            foreach (var t in types)
            {
                foreach (var method in t.Methods)
                {
                    if (method.Name.Contains("flare") && !method.Name.Contains("flared") && !method.Name.Contains("flare_74") && !method.Name.Contains("flare_71"))
                    {
                        bool isPatchable = checkForMethodFlare71(method);
                        if (isPatchable == true)
                        {
                            Console.WriteLine("Found patchable function: " + method.Name);
                            functionsPatchFlare71.Add(method.Name);
                        }
                    }
                }
            }
        }

        //Second layer deobfuscation:
        //1.-Create a list from the reflected patched module to get where flare_70 are used (and therefore can be emulated).
        //2.-Loop through the unpatched reflected module, get if the name matches. If it does, proceed with body patch, else, ignore and generate empty body (from the verify Functions).
        //3.-Patch the module using the reflected unpatched module.

        public bool FoundInPatchList(MethodDefinition method) {
            bool IsPatchable = false;
            foreach (var name in functionsToPatch) {
                if (name.Contains(method.Name)) { 
                    IsPatchable = true;
                    break;
                }
            }
            return IsPatchable;
        }

        public void printInstructions(MethodDefinition method)
        {
            var formatter = new CilInstructionFormatter();
            foreach (CilInstruction instruction in method.CilMethodBody.Instructions)
                Console.WriteLine(formatter.FormatInstruction(instruction));
        }

        public int MethodPosition(IList<MethodDefinition> methods, MethodDefinition flared)
        {
            int pos = 0;
            for (int i = 0; i < methods.Count; i++)
            {
                if (methods[i].Name.Equals(flared.Name))
                {
                    pos = i;
                    break;
                }
            }
            return pos;
        }

        public void addDeobuscatedMain()
        {
            MethodDefinition emuFunctionCallee = getFunctionFromModule("flared_70");
            MethodDefinition emuMain = getFunctionFromModule("flared_38");
            int metadataToken = emuMain.MetadataToken.ToInt32();
            string encodedMetadata = MetadataEncoderToString(metadataToken);
            byte[] d = GetSectionHeaderToGetPayload(encodedMetadata);
            byte[] b = Rc4Decryption(new byte[]
            {
                18,
                120,
                171,
                223
            }, d);
            byte[] outputIl = generateILOutput(b, metadataToken);
            try
            {
                emuMain.CilMethodBody.VerifyLabels();
                int size = emuMain.CilMethodBody.Instructions.Size;
            }
            catch
            {
                Console.WriteLine("Zero out flared method: " + emuMain.Name + ", creating new body\n");
                CilMethodBody methodBody = new CilMethodBody(emuMain);
                emuMain.CilMethodBody = methodBody;
            }
            var reader = ByteArrayDataSource.CreateReader(outputIl);
            var cilDisassembler = new CilDisassembler(in reader,
                    new PhysicalCilOperandResolver(emuMain.Module, emuMain.CilMethodBody));
            var instrs = cilDisassembler.ReadInstructions();
            emuMain.CilMethodBody.Instructions.Clear();
            emuMain.CilMethodBody.Instructions.AddRange(instrs);
            PatchFunction(emuMain);
        }

        public bool FoundInPatchFlare71List(MethodDefinition method)
        {
            bool IsPatchable = false;
            foreach (var name in functionsPatchFlare71)
            {
                if (name.Contains(method.Name))
                {
                    IsPatchable = true;
                    break;
                }
            }
            return IsPatchable;
        }


        public Tuple<string, string> FindTwoArguments(MethodDefinition method, int positionCall)
        {
            int cant = method.CilMethodBody.Instructions.Count();
            int posArg1 = 0, posArg2 = 0, posArg3 = 0;
            int i = cant - 1;
            //Type 1: argument 1
            while (i != 0)
            {
                var inst = method.CilMethodBody.Instructions[i];
                if (inst.OpCode == CilOpCodes.Ldsfld)
                {
                    //Console.WriteLine("The first position found is: " + inst.ToString());
                    posArg1 = i;
                    break;
                }
                i--;
            }
            //Type 1: argument 2.
            int j = cant - 1;
            while (j != 0)
            {
                var inst = method.CilMethodBody.Instructions[j];
                if (inst.OpCode == CilOpCodes.Ldsfld)
                {
                    //Console.WriteLine("The second position found is: " + inst.ToString());
                    if (posArg1 > j && j < cant - 1)
                    {
                        posArg2 = j;
                        break;
                    }
                }
                j--;
            }
            int k = cant - 1;
            while (k != 0)
            {
                var inst = method.CilMethodBody.Instructions[k];
                if (inst.OpCode == CilOpCodes.Newobj)
                {
                    //Console.WriteLine("The second position found is: " + inst.ToString() );
                    if (posArg1 > k && k < cant - 1)
                    {
                        posArg3 = k;
                        break;
                    }
                }
                k--;
            }
            if (posArg1 != 0 && posArg2 != 0 || posArg1 != 0 && posArg3 != 0)
            {

                if (posArg1 != 0 && posArg2 != 0)
                {
                    var tuple = new Tuple<string, string>(method.CilMethodBody.Instructions[posArg1].ToString(), method.CilMethodBody.Instructions[posArg2].ToString());
                    return tuple;
                }
                else if (posArg1 != 0 && posArg3 != 0)
                {
                    var tuple = new Tuple<string, string>(method.CilMethodBody.Instructions[posArg1].ToString(), method.CilMethodBody.Instructions[posArg3].ToString());
                    return tuple;
                }
            }
            return null;
        }

        public Tuple<MethodDefinition, string, string> FindingAllCallReferences(MethodDefinition method, ref MethodDefinition flaredMethod)
        {
            int FullMethodCount = method.CilMethodBody.Instructions.Count();
            MethodDefinition MethodInst = null;
            int positionCall = 0;
            for (int i = 0; i < FullMethodCount; i++)
            {
                var ins = method.CilMethodBody.Instructions[i];
                if (ins.OpCode == CilOpCodes.Call && !((MethodDefinition)ins.Operand).Name.Contains("flared"))
                {
                    MethodInst = (MethodDefinition)ins.Operand;
                    positionCall = i;
                    break;
                }
            }
            for (int i = 0; i < FullMethodCount; i++)
            {
                var ins = method.CilMethodBody.Instructions[i];
                if (ins.OpCode == CilOpCodes.Call && ((MethodDefinition)ins.Operand).Name.Contains("flared"))
                {
                    flaredMethod = (MethodDefinition)ins.Operand;
                    break;
                }
            }
            if (positionCall == 0 || MethodInst == null || flaredMethod == null)
            {
                return null;
            }
            Console.WriteLine("Found call as: " + method.CilMethodBody.Instructions[positionCall].ToString());
            Tuple<string, string> args = null;
            if (positionCall < FullMethodCount)
            {
                args = FindTwoArguments(method, positionCall);
            }
            if (args == null){
                return null;
            }
            Tuple<MethodDefinition, string, string> data = new Tuple<MethodDefinition, string, string>(MethodInst, args.Item1, args.Item2);
            return data;
        }

        private MemberInfo resolveMember(string data, ref bool IsDictCase)
        {
            var t = this.DeobObjNormal.GetType().GetMembers();
            MemberInfo mem = null;
            foreach (var type in t)
            {
                if (data.ToString().Contains(type.Name))
                {
                    mem = type;
                    break;
                }
            }
            if (data.ToString().Contains("newobj") && data.ToString().Contains("Dictionary") && data.ToString().Contains(".ctor"))
            {
                IsDictCase = true;
            }
            return mem;
        }
        public byte[] DecryptionFunc(MethodDefinition flareFunction, byte[] b, Dictionary<uint, int> m)
        {
            foreach (KeyValuePair<uint, int> keyValuePair in m)
            {
                int value = keyValuePair.Value;
                uint key = keyValuePair.Key;
                int tokenFor = 0;
                tokenFor = value;
                b[(int)key] = (byte)tokenFor;
                b[(int)(key + 1U)] = (byte)(tokenFor >> 8);
                b[(int)(key + 2U)] = (byte)(tokenFor >> 16);
                b[(int)(key + 3U)] = (byte)(tokenFor >> 24);
            }
            return b;
        }

        public byte[] decryptionHandler(MethodDefinition methodDef, Tuple<MethodDefinition, string, string> data, MethodDefinition flaredFunction)
        {
            MemberInfo arg1Type = null;
            MemberInfo arg2Type = null;
            byte[] ByteStream = null;
            bool isDictCase = false;
            //flare71 case
            if (data != null)
            {
                arg2Type = resolveMember(data.Item2, ref isDictCase);
                arg1Type = resolveMember(data.Item3, ref isDictCase);
            }
            if (isDictCase == false)
            {
                Console.WriteLine("Could found the arguments: Dictionary: " + arg1Type.Name + " and raw bytes: " + arg2Type.Name + '\n');
            }
            else
            {
                Console.WriteLine("Found the dict case, the arguments are " + arg2Type.Name + " and new Dictionary" + '\n');
            }
            Type DeobjType = this.DeobObjNormal.GetType();
            byte[] arg2 = (byte[])DeobjType.GetProperty(arg2Type.Name).GetValue(this.DeobObjNormal);
            if (isDictCase == true)
            {
                var emptyDic = new Dictionary<uint, int>();
                ByteStream = DecryptionFunc(flaredFunction, arg2, emptyDic);
                return ByteStream;
            }
            //Type DeobjType = this.DeobObj.GetType();
            Dictionary<uint, int> arg1 = (Dictionary<uint, int>)DeobjType.GetProperty(arg1Type.Name).GetValue(this.DeobObjNormal);
            ByteStream = DecryptionFunc(flaredFunction, arg2, arg1);
            return ByteStream;
        }

        //SOLO CASOS DE FLARE 71
        public void addFlare71Functions()
        {
            var types = this.moduleNotPatched.TopLevelTypes;
            foreach (var t in types)
            {
                foreach (var method in t.Methods)
                {
                    if (!FoundInPatchFlare71List(method)){
                        continue;
                    }
                    MethodDefinition flaredFunction = null;
                    var data = FindingAllCallReferences(method, ref flaredFunction);
                    if (data == null) {
                        Console.WriteLine("Could not find reference for target method: " + method.Name);
                        continue;
                    }
                    byte[] IlCode = decryptionHandler(method, data, flaredFunction);
                    int posFlared = MethodPosition(t.Methods, flaredFunction);
                    var reader = ByteArrayDataSource.CreateReader(IlCode);
                    try
                    {
                        t.Methods[posFlared].CilMethodBody.VerifyLabels();
                        int size = t.Methods[posFlared].CilMethodBody.Instructions.Size;
                    }
                    catch
                    {
                        Console.WriteLine("Zero out flared method: " + t.Methods[posFlared].Name + ", creating new body\n");
                        CilMethodBody methodBody = new CilMethodBody(t.Methods[posFlared]);
                        t.Methods[posFlared].CilMethodBody = methodBody;
                    }

                    var cilDisassembler = new CilDisassembler(in reader, new PhysicalCilOperandResolver(t.Methods[posFlared].Module, t.Methods[posFlared].CilMethodBody));
                    var instrs = cilDisassembler.ReadInstructions();
                    t.Methods[posFlared].CilMethodBody.ExceptionHandlers.Clear();
                    t.Methods[posFlared].CilMethodBody.Instructions.Clear();
                    t.Methods[posFlared].CilMethodBody.Instructions.AddRange(instrs);
                    t.Methods[posFlared].CilMethodBody.ComputeMaxStackOnBuild = false;
                    Console.WriteLine("The function patch is for: " + t.Methods[posFlared].Name);
                    printInstructions(t.Methods[posFlared]);
                }
            }
        }
        
        public void DeobfuscateLayer2()
        {
            GenearateListToPatchFLARE71();
            GenearateListToPatchFromPatchedModule();
            var types = this.moduleNotPatched.TopLevelTypes;
            foreach (var t in types)
            {
                var methodCount = t.Methods.Count();
                for (int i = 0; i < methodCount; i++)
                {
                    var method = t.Methods[i];
                    if (!FoundInPatchList(method)){
                        continue;        
                    }
                    Console.WriteLine("Found method to patch for: " + method.Name);
                    
                    var functions = findingCallReferences(method);
                    if (functions == null) {
                        Console.WriteLine("Found method that uses flare_71, skipping decryption");
                        continue;
                    }
                    int metadataToken =  functions.Item2.MetadataToken.ToInt32();
                    string encodedMetadata = MetadataEncoderToString(metadataToken);
                    byte[] d = GetSectionHeaderToGetPayload(encodedMetadata);
                    byte[] b = Rc4Decryption(new byte[]
                    {
                            18,
                            120,
                            171,
                            223
                    }, d);
                    byte[] outputIl = generateILOutput(b, metadataToken);
                    try
                    {
                        functions.Item2.CilMethodBody.VerifyLabels();
                        int size = functions.Item2.CilMethodBody.Instructions.Size;
                    }
                    catch
                    {
                        Console.WriteLine("Zero out flared method: " + functions.Item2.Name + ", creating new body");
                        CilMethodBody methodBody = new CilMethodBody(functions.Item2);
                        functions.Item2.CilMethodBody = methodBody;
                    }
                    var reader = ByteArrayDataSource.CreateReader(outputIl);
                    var cilDisassembler = new CilDisassembler(in reader, new PhysicalCilOperandResolver(functions.Item2.Module, functions.Item2.CilMethodBody));
                    var instrs = cilDisassembler.ReadInstructions();
                    functions.Item2.CilMethodBody.Instructions.Clear();
                    functions.Item2.CilMethodBody.Instructions.AddRange(instrs);
                    int posFlared = MethodPosition(t.Methods, functions.Item2);
                    t.Methods[posFlared].CilMethodBody = functions.Item2.CilMethodBody;
                    Console.WriteLine("Generated patch for: " + functions.Item2.Name + ", where the core method is: " + functions.Item1.Name);
                }
            }
            addDeobuscatedMain();
            addFlare71Functions();
            verifyFunctions();
            moduleNotPatched.Write(filePath + "__patch_bot.exe");
        }
        string filePath;
        ModuleDefinition moduleNotPatched;
        ModuleDefinition ModulePatched;
        Module reflectedNotPatched;
        public FLARE09 DeobObj;
        Assembly asmNotPatched;
        List<string> functionsToPatch;
        List<string> functionsPatchFlare71;
        FLARE15 DeobObjNormal;

    }
}
//MISSING:
//1.-Additional deobfuscated from flare_71 are needed to be added.
//remember keeping the false in case it is used :)

namespace DeobfuscatorFLARE
{
    internal class Program
    {
        static void Main(string[] args)
        {
            //Deobfuscation Layer 1.

            string buffer = @"C:\Users\User\Downloads\08_backdoor\FlareOn.Backdoor.exe";
            Deobfuscator deobfuscator = new Deobfuscator(buffer);
            deobfuscator.DeobfuscateLayer1();

            //Deobfuscation Layer 2.
            string patched = @"C:\Users\User\Downloads\08_backdoor\FlareOn.Backdoor.exe_patched.exe";
            string notpatched = @"C:\Users\User\Downloads\08_backdoor\FlareOn.Backdoor.exe";
            Deobfuscator2 deobfuscator2 = new Deobfuscator2(patched, notpatched);
            deobfuscator2.DeobfuscateLayer2();
            Console.ReadLine();
        }
    }
}
